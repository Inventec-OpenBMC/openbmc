From 8bb4632be2b292c1a05453f0644c318fe0a3fc38 Mon Sep 17 00:00:00 2001
From: Tim Lee <timlee660101@gmail.com>
Date: Wed, 10 Mar 2021 17:22:26 +0800
Subject: [PATCH] add support chassis on/off target files

Signed-off-by: Tim Lee <timlee660101@gmail.com>
Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 power-control-x86/src/power_control.cpp | 51 +++++++++++++++++++++++--
 1 file changed, 47 insertions(+), 4 deletions(-)

diff --git a/power-control-x86/src/power_control.cpp b/power-control-x86/src/power_control.cpp
index 5692483..be30b8d 100644
--- a/power-control-x86/src/power_control.cpp
+++ b/power-control-x86/src/power_control.cpp
@@ -444,10 +444,49 @@ static void setBootProgress(const BootProgressStage stage)
 {
     bootIface->set_property("BootProgress",
                             std::string(getBootProgressStage(stage)));
-    std::cerr << "Moving boot progress to \""
-            << std::string(getBootProgressStage(stage)) << "\" stage.\n";
+    std::string logMsg =
+        "Moving boot progress to " + std::string(getBootProgressStage(stage)) + " stage.\n";
+
+    phosphor::logging::log<phosphor::logging::level::INFO>(logMsg.c_str());
 }
 
+static constexpr auto systemdBusname = "org.freedesktop.systemd1";
+static constexpr auto systemdPath = "/org/freedesktop/systemd1";
+static constexpr auto systemdInterface = "org.freedesktop.systemd1.Manager";
+static constexpr auto chassisOnTargetName = "obmc-chassis-poweron.target";
+static constexpr auto chassisOffTargetName = "obmc-chassis-poweroff.target";
+
+void chassisPowerOn()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    "Failed to call chassisPowerOn",
+                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOnTargetName, "replace");
+    return;
+}
+
+void chassisPowerOff()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    "Failed to call chassisPowerOff",
+                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOffTargetName, "replace");
+    return;
+}
 
 static constexpr std::string_view getHostState(const PowerState state)
 {
@@ -1421,6 +1460,8 @@ static void currentHostStateMonitor()
         pohCounterTimerStart();
         // Clear the restart cause set for the next restart
         clearRestartCause();
+
+        power_control::chassisPowerOn();
     }
     else
     {
@@ -1429,7 +1470,7 @@ static void currentHostStateMonitor()
         // If HostState is trurned to OFF, Set 'OperatingSystemState' to 'Inactive'
         osIface->set_property("OperatingSystemState", std::string("Inactive"));
         setBootProgress(BootProgressStage::Unspecified);
-
+        power_control::chassisPowerOff();
         // Set the restart cause set for this restart
         setRestartCause();
     }
@@ -1499,7 +1540,7 @@ static void currentHostStateMonitor()
                                       std::string("Inactive"));
 
                 setBootProgress(BootProgressStage::Unspecified);
-
+                power_control::chassisPowerOff();
                 // Set the restart cause set for this restart
                 setRestartCause();
                 resetACBootProperty();
@@ -2301,12 +2342,14 @@ static void postCompleteHandler()
         sendPowerControlEvent(Event::postCompleteAssert);
         osIface->set_property("OperatingSystemState", std::string("Standby"));
         setBootProgress(BootProgressStage::OSStart);
+        power_control::chassisPowerOn();
     }
     else
     {
         sendPowerControlEvent(Event::postCompleteDeAssert);
         osIface->set_property("OperatingSystemState", std::string("Inactive"));
         setBootProgress(BootProgressStage::Unspecified);
+        power_control::chassisPowerOff();
     }
     postCompleteEvent.async_wait(
         boost::asio::posix::stream_descriptor::wait_read,
-- 
2.17.1

