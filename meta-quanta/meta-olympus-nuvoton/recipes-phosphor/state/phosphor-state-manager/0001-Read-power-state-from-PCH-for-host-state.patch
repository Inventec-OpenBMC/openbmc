From a1a5162c5c99097df6d53ec5fb3a7a061379a773 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Fri, 6 Mar 2020 12:06:33 +0800
Subject: [PATCH] Read power state from PCH for host state

---
 host_check_main.cpp    | 71 ++++++++++++++++++++++++++++++++----------
 host_state_manager.cpp |  9 ++++++
 meson.build            | 13 ++++++--
 3 files changed, 74 insertions(+), 19 deletions(-)

diff --git a/host_check_main.cpp b/host_check_main.cpp
index e055abc..51acbb7 100644
--- a/host_check_main.cpp
+++ b/host_check_main.cpp
@@ -1,5 +1,7 @@
 #include "config.h"
-
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <cstdlib>
 #include <unistd.h>
 
 #include <phosphor-logging/log.hpp>
@@ -12,6 +14,12 @@
 #include <fstream>
 #include <iostream>
 
+extern "C" {
+#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+#include <linux/i2c.h>
+}
+
 using namespace std::literals;
 using namespace phosphor::logging;
 using namespace sdbusplus::xyz::openbmc_project::Control::server;
@@ -28,6 +36,40 @@ constexpr auto CONTROL_HOST_INTERFACE = "xyz.openbmc_project.Control.Host";
 bool cmdDone = false;
 bool hostRunning = false;
 
+
+uint8_t i2cReadByteData(const int& i2cBus, const int& slaveAddr, const int& flags, const uint8_t& offset)
+{
+        std::string i2cDev = "/dev/i2c-" + std::to_string(i2cBus);
+        int fd = -1;
+
+        fd = open(i2cDev.c_str(), flags);
+        if (fd < 0)
+        {
+            throw std::runtime_error("Unable to open i2c device.");
+        }
+
+        if (ioctl(fd, I2C_SLAVE_FORCE, slaveAddr) < 0)
+        {
+            close(fd);
+            fd = -1;
+            throw std::runtime_error("Unable to set i2c slave address.");
+        }
+
+        int ret = i2c_smbus_read_byte_data(fd, offset);
+
+        if (ret < 0)
+        {
+            throw std::runtime_error("i2c read failed");
+        }
+
+        if (!(fd < 0))
+        {
+            close(fd);
+        }
+
+        return static_cast<uint8_t>(ret);
+}
+
 // Function called on host control signals
 static int hostControlSignal(sd_bus_message* msg, void* userData,
                              sd_bus_error* retError)
@@ -119,24 +161,19 @@ int main()
 
     auto bus = sdbusplus::bus::new_default();
 
-    std::string s = "type='signal',member='CommandComplete',path='"s +
-                    CONTROL_HOST_PATH + "',interface='" +
-                    CONTROL_HOST_INTERFACE + "'";
-
-    // Setup Signal Handler
-    sdbusplus::bus::match::match hostControlSignals(bus, s.c_str(),
-                                                    hostControlSignal, nullptr);
+    constexpr uint8_t pchDevI2CBusNumber = 0x04;
+    constexpr uint8_t pchDevI2CSlaveAddress = 0x44;
+    constexpr uint8_t pchDevRegPWState = 0x01;
 
-    sendHeartbeat(bus);
+    int state =
+        i2cReadByteData(pchDevI2CBusNumber, pchDevI2CSlaveAddress, O_RDWR | O_CLOEXEC, pchDevRegPWState);
+    if (state <= 3) //S0-S3
+        hostRunning = true;
+    else
+        hostRunning = false;
 
-    // Wait for signal
-    while (!cmdDone)
-    {
-        bus.process_discard();
-        if (cmdDone)
-            break;
-        bus.wait();
-    }
+    std::string f_str = std::to_string(state);
+    log<level::INFO>(("Host Power State is " + f_str).c_str());
 
     // If host running then create file
     if (hostRunning)
diff --git a/host_state_manager.cpp b/host_state_manager.cpp
index ed083c2..778ecc7 100644
--- a/host_state_manager.cpp
+++ b/host_state_manager.cpp
@@ -21,6 +21,7 @@
 #include <map>
 #include <string>
 
+
 // Register class version with Cereal
 CEREAL_CLASS_VERSION(phosphor::state::manager::Host, CLASS_VERSION)
 
@@ -103,6 +104,8 @@ void Host::determineInitialState()
                                convertForMessage(HostState::Running).c_str()));
         server::Host::currentHostState(HostState::Running);
         server::Host::requestedHostTransition(Transition::On);
+        bootprogress::Progress::bootProgress(ProgressStages::OSStart);
+        osstatus::Status::operatingSystemState(OSStatus::Standby);
     }
     else
     {
@@ -261,6 +264,10 @@ void Host::sysStateChangeJobRemoved(sdbusplus::message::message& msg)
     {
         log<level::INFO>("Received signal that host is running");
         this->currentHostState(server::Host::HostState::Running);
+        if (fs::exists("/run/openbmc/host@0-on")) {
+            this->bootProgress(bootprogress::Progress::ProgressStages::OSStart);
+            this->operatingSystemState(osstatus::Status::OSStatus::Standby);
+        }
     }
     else if ((newStateUnit == HOST_STATE_QUIESCE_TGT) &&
              (newStateResult == "done") &&
@@ -379,6 +386,8 @@ Host::HostState Host::currentHostState(HostState value)
     return server::Host::currentHostState(value);
 }
 
+
+
 } // namespace manager
 } // namespace state
 } // namespace phosphor
diff --git a/meson.build b/meson.build
index a517f77..f52909c 100644
--- a/meson.build
+++ b/meson.build
@@ -49,13 +49,22 @@ phosphordbusinterfaces = dependency('phosphor-dbus-interfaces')
 
 cppfs = meson.get_compiler('cpp').find_library('stdc++fs')
 
+libi2c_dev = static_library(
+    'i2c_dev',
+    link_args : '-li2c',
+)
+
+libi2c_dep = declare_dependency(
+    link_with: libi2c_dev,
+    link_args : '-li2c')
+
 executable('phosphor-host-state-manager',
             'host_state_manager.cpp',
             'host_state_manager_main.cpp',
             'settings.cpp',
             dependencies: [
             sdbusplus, sdeventplus, phosphorlogging,
-            phosphordbusinterfaces, cppfs
+            phosphordbusinterfaces, cppfs 
             ],
     implicit_include_directories: true,
     install: true
@@ -96,7 +105,7 @@ executable('phosphor-discover-system-state',
 executable('phosphor-host-check',
             'host_check_main.cpp',
             dependencies: [
-            sdbusplus, phosphorlogging
+            sdbusplus, phosphorlogging, libi2c_dep
             ],
     implicit_include_directories: true,
     install: true
-- 
2.17.1

