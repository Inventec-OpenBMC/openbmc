From 088156597f18ef911f6a4ddcb7f095bbc0488998 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Wed, 18 Aug 2021 05:15:52 +0000
Subject: [PATCH] Add host-power-off and host-power-on hook service

Symptom/Reason:
    To add service to handle the actions to do after host power on/off

Root Cause:
    N/A

Solution/Change:
    Add systemHostPowrOn and systemHostPowerOff to call the service

Entry Test:

Power Off:
sysadmin@transformers:/sys/class/hwmon# journalctl -u host-power-off.service
-- Journal begins at Tue 2020-09-01 00:54:06 GMT, ends at Tue 2027-03-23 06:16:45 GMT. --
Aug 18 09:37:16 transformers systemd[1]: Starting System unit to for host power off...
Aug 18 09:37:16 transformers host-power-off.sh[996]: host-power-off start
Aug 18 09:37:16 transformers systemd[1]: host-power-off.service: Succeeded.
Aug 18 09:37:16 transformers systemd[1]: Finished System unit to for host power off.

Power On:
Mar 23 05:27:09 transformers systemd[1]: Starting System unit to for host power on...
Mar 23 05:27:09 transformers host-power-on.sh[2317]: host-power-on start
Mar 23 05:27:20 transformers systemd[1]: host-power-on.service: Succeeded.
Mar 23 05:27:20 transformers systemd[1]: Finished System unit to for host power on.
---
 power-control-x86/src/power_control.cpp | 90 +++++++++++++++++++------
 1 file changed, 68 insertions(+), 22 deletions(-)

diff --git a/power-control-x86/src/power_control.cpp b/power-control-x86/src/power_control.cpp
index 74de93c..89b7d06 100644
--- a/power-control-x86/src/power_control.cpp
+++ b/power-control-x86/src/power_control.cpp
@@ -1489,12 +1489,69 @@ static void sioPowerGoodWatchdogTimerStart()
         });
 }
 
+
+
+static constexpr auto systemdBusname = "org.freedesktop.systemd1";
+static constexpr auto systemdPath = "/org/freedesktop/systemd1";
+static constexpr auto systemdInterface = "org.freedesktop.systemd1.Manager";
+static constexpr auto systemResetTargetName = "chassis-system-reset.target";
+static constexpr auto systemHostOnTargetName = "host-power-on.target";
+static constexpr auto systemHostOffTargetName = "host-power-off.target";
+
+#ifdef CHASSIS_SYSTEM_RESET
+void systemReset()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    "Failed to call chassis system reset",
+                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        systemResetTargetName, "replace");
+}
+#endif
+
+void systemHostPowerOn()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    "Failed to call chassis system reset",
+                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        systemHostOnTargetName, "replace");
+}
+
+void systemHostPowerOff()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    "Failed to call chassis system reset",
+                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        systemHostOffTargetName, "replace");
+}
+
 static void powerStateOn(const Event event)
 {
     logEvent(__FUNCTION__, event);
     switch (event)
     {
         case Event::psPowerOKDeAssert:
+            systemHostPowerOff();
             setPowerState(PowerState::off);
             // DC power is unexpectedly lost, beep
             beep(beepPowerFail);
@@ -1561,6 +1618,7 @@ static void powerStateWaitForPSPowerOK(const Event event)
             }
             else
             {
+                systemHostPowerOn();
                 setPowerState(PowerState::on);
             }
             break;
@@ -1571,6 +1629,7 @@ static void powerStateWaitForPSPowerOK(const Event event)
             break;
         case Event::sioPowerGoodAssert:
             psPowerOKWatchdogTimer.cancel();
+            systemHostPowerOn();
             setPowerState(PowerState::on);
             break;
         default:
@@ -1587,6 +1646,7 @@ static void powerStateWaitForSIOPowerGood(const Event event)
     {
         case Event::sioPowerGoodAssert:
             sioPowerGoodWatchdogTimer.cancel();
+            systemHostPowerOn();
             setPowerState(PowerState::on);
             break;
         case Event::sioPowerGoodWatchdogTimerExpired:
@@ -1613,6 +1673,7 @@ static void powerStateOff(const Event event)
             }
             else
             {
+                systemHostPowerOn();
                 setPowerState(PowerState::on);
             }
             break;
@@ -1621,6 +1682,7 @@ static void powerStateOff(const Event event)
             setPowerState(PowerState::waitForPSPowerOK);
             break;
         case Event::sioPowerGoodAssert:
+            systemHostPowerOn();
             setPowerState(PowerState::on);
             break;
         case Event::powerButtonPressed:
@@ -1647,6 +1709,7 @@ static void powerStateTransitionToOff(const Event event)
         case Event::psPowerOKDeAssert:
             // Cancel any GPIO assertions held during the transition
             gpioAssertTimer.cancel();
+            systemHostPowerOff();
             setPowerState(PowerState::off);
             break;
         default:
@@ -1663,6 +1726,7 @@ static void powerStateGracefulTransitionToOff(const Event event)
     {
         case Event::psPowerOKDeAssert:
             gracefulPowerOffTimer.cancel();
+            systemHostPowerOff();
             setPowerState(PowerState::off);
             break;
         case Event::gracefulPowerOffTimerExpired:
@@ -1737,6 +1801,7 @@ static void powerStateTransitionToCycleOff(const Event event)
         case Event::psPowerOKDeAssert:
             // Cancel any GPIO assertions held during the transition
             gpioAssertTimer.cancel();
+            systemHostPowerOff();
             setPowerState(PowerState::cycleOff);
             powerCycleTimerStart();
             break;
@@ -1754,6 +1819,7 @@ static void powerStateGracefulTransitionToCycleOff(const Event event)
     {
         case Event::psPowerOKDeAssert:
             gracefulPowerOffTimer.cancel();
+            systemHostPowerOff();
             setPowerState(PowerState::cycleOff);
             powerCycleTimerStart();
             break;
@@ -1796,6 +1862,7 @@ static void powerStateCheckForWarmReset(const Event event)
             break;
         case Event::psPowerOKDeAssert:
             warmResetCheckTimer.cancel();
+            systemHostPowerOff();
             setPowerState(PowerState::off);
             // DC power is unexpectedly lost, beep
             beep(beepPowerFail);
@@ -1981,28 +2048,6 @@ static void resetButtonHandler()
         });
 }
 
-#ifdef CHASSIS_SYSTEM_RESET
-static constexpr auto systemdBusname = "org.freedesktop.systemd1";
-static constexpr auto systemdPath = "/org/freedesktop/systemd1";
-static constexpr auto systemdInterface = "org.freedesktop.systemd1.Manager";
-static constexpr auto systemTargetName = "chassis-system-reset.target";
-
-void systemReset()
-{
-    conn->async_method_call(
-        [](boost::system::error_code ec) {
-            if (ec)
-            {
-                phosphor::logging::log<phosphor::logging::level::ERR>(
-                    "Failed to call chassis system reset",
-                    phosphor::logging::entry("ERR=%s", ec.message().c_str()));
-            }
-        },
-        systemdBusname, systemdPath, systemdInterface, "StartUnit",
-        systemTargetName, "replace");
-}
-#endif
-
 static void nmiSetEnableProperty(bool value)
 {
     conn->async_method_call(
@@ -2602,6 +2647,7 @@ int main(int argc, char* argv[])
     // Check power good
     if (psPowerOKLine.get_value() > 0)
     {
+        systemHostPowerOn();
         powerState = PowerState::on;
     }
 
-- 
2.17.1

