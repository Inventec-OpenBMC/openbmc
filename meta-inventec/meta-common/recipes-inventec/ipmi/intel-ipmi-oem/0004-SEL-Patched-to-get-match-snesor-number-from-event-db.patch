From 849ee2f89dd42bed338791c3679eb78d84a1d9ef Mon Sep 17 00:00:00 2001
From: anonymous <anonymous@inventec.com>
Date: Wed, 15 Jul 2020 15:47:10 -0400
Subject: [PATCH 04/11] Patched to get match snesor number from event dbus
 path.

Patched to get match snesor number from event dbus path.
---
 include/sdrutils.hpp | 66 +++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 45 insertions(+), 21 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 3c66f94..075dd28 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -121,47 +121,71 @@ inline static bool getSensorSubtree(std::shared_ptr<SensorSubTree>& subtree)
 
 inline static bool getSensorNumMap(std::shared_ptr<SensorNumMap>& sensorNumMap)
 {
-    static std::shared_ptr<SensorNumMap> sensorNumMapPtr;
+    constexpr auto ipmiInterface = "xyz.openbmc_project.Sensor.IpmiSensor";
+    constexpr auto sensorNumProp = "sensorNumber";
+    constexpr auto propIntf = "org.freedesktop.DBus.Properties";
+    std::string connection;
+    std::string path;
+    std::variant<uint64_t> sn;
+    uint8_t sensorNumber;
     bool sensorNumMapUpated = false;
 
+    static std::shared_ptr<SensorNumMap> sensorNumMapPtr = std::make_shared<SensorNumMap>();
+
     std::shared_ptr<SensorSubTree> sensorTree;
     bool sensorTreeUpdated = details::getSensorSubtree(sensorTree);
-    if (!sensorTree)
+
+    if (!sensorTree) 
     {
-        return sensorNumMapUpated;
+        return sensorNumMapUpated; //false;
     }
 
-    if (!sensorTreeUpdated && sensorNumMapPtr)
+    sd_bus* bus = NULL;
+    int ret = sd_bus_default_system(&bus);
+    if (ret < 0)
     {
-        sensorNumMap = sensorNumMapPtr;
-        return sensorNumMapUpated;
+        return sensorNumMapUpated; //false;
     }
 
-    sensorNumMapPtr = std::make_shared<SensorNumMap>();
+    sdbusplus::bus::bus dbus(bus);
 
     uint16_t sensorNum = 0;
     uint16_t sensorIndex = 0;
     for (const auto& sensor : *sensorTree)
     {
-        sensorNumMapPtr->insert(
-            SensorNumMap::value_type(sensorNum, sensor.first));
-        sensorIndex++;
-        if (sensorIndex == maxSensorsPerLUN)
+        try
         {
-            sensorIndex = lun1Sensor0;
-        }
-        else if (sensorIndex == (lun1Sensor0 | maxSensorsPerLUN))
-        {
-            // Skip assigning LUN 0x2 any sensors
-            sensorIndex = lun3Sensor0;
+            connection = sensor.second.begin()->first;
+            path = sensor.first;
+
+            if constexpr (debug)
+            {
+                std::fprintf(stderr, "[getSensorNumMap] OBJ_PATH: %s, SERVICE: %s\n", path.c_str(), connection.c_str());
+            }
+
+            auto methodCall = dbus.new_method_call(connection.c_str(), path.c_str(), propIntf, "Get");
+            methodCall.append(ipmiInterface, sensorNumProp);
+
+            auto reply = dbus.call(methodCall);
+            if (reply.is_method_error())
+            {
+                std::fprintf(stderr, "[getSensorNumMap] Method call reply fail\n");
+                return sensorNumMapUpated; //false;
+            }
+
+            reply.read(sn);
+            sensorNumber = static_cast<uint8_t>(std::get<uint64_t>(sn));
+
+            sensorNumMapPtr->insert(
+                SensorNumMap::value_type(sensorNumber, path));
         }
-        else if (sensorIndex == (lun3Sensor0 | maxSensorsPerLUN))
+        catch (std::exception &)
         {
-            // this is an error, too many IPMI sensors
-            throw std::out_of_range("Maximum number of IPMI sensors exceeded.");
+            std::fprintf(stderr, "[getSensorNumMap] Get Sensor Map Fail\n");
+            return sensorNumMapUpated; //false;
         }
-        sensorNum = sensorIndex;
     }
+
     sensorNumMap = sensorNumMapPtr;
     sensorNumMapUpated = true;
     return sensorNumMapUpated;
-- 
2.7.4

