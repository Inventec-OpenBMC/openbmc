From a124ba035174374890d9974fb44d588f5d2661f3 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Thu, 20 May 2021 02:32:45 +0000
Subject: [PATCH] [inventec][common] - Add more sensor type and event type

Symtom/Reason:
    In intel-ipmi-oem, sensor type and event type are get from dbus path name.
    But currently not support all of sensor type and cannot return correct value.

Root Cause:
    Refer to getSensorTypeStringFromPath(), has not much sensor type supported.

Solution/Change:
    [sdrutils.hpp]
        Define more sensor type and related path key words.

Entry Test:

busctl call "xyz.openbmc_project.Logging.IPMI" "/xyz/openbmc_project/Logging/IPMI" "xyz.openbmc_project.Logging.IPMI" \
"IpmiSelAdd" ssaybq "DCMI_Power_Off" \
"/xyz/openbmc_project/sensors/discrete_0ah/system_event/DCMI_Power_Off" 3 {0x02,0xff,0xff} yes 0x20

sysadmin@transformers:~# ipmitool sel elist
   1 |  Pre-Init  |0000000815| System Event DCMI_Power_Off | Transition to Power Off | Asserted
---
 include/sdrutils.hpp        | 40 +++++++++++++++++++++++++++++++++++--
 include/storagecommands.hpp |  1 +
 src/sensorcommands.cpp      |  1 +
 3 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 6eab0c1..375bb3a 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -568,7 +568,12 @@ enum class SensorTypeCodes : uint8_t
     voltage = 0x2,
     current = 0x3,
     fan = 0x4,
+    processor = 0x7,
+    power_supply = 0x8,
+    power_unit = 0x9,
     other = 0xB,
+    memory = 0x0C,
+    system_event = 0x12,
     oem = 0xC0,
 };
 
@@ -579,7 +584,14 @@ const static boost::container::flat_map<const char*, SensorTypeCodes, CmpStr>
                  {"current", SensorTypeCodes::current},
                  {"fan_tach", SensorTypeCodes::fan},
                  {"fan_pwm", SensorTypeCodes::fan},
-                 {"power", SensorTypeCodes::other}}};
+                 {"processor", SensorTypeCodes::processor},
+                 {"power_supply", SensorTypeCodes::power_supply},
+                 {"power_unit", SensorTypeCodes::power_unit},
+                 {"power", SensorTypeCodes::other},
+                 {"cfm", SensorTypeCodes::other},
+                 {"memory", SensorTypeCodes::memory},
+                 {"system_event", SensorTypeCodes::system_event}
+                 }};
 
 inline static std::string getSensorTypeStringFromPath(const std::string& path)
 {
@@ -654,9 +666,33 @@ inline static uint8_t getEventTypeStringFromPath(const std::string& path)
 {
     uint8_t eventType = 0xFF;
 
+    /* Add more path key words */
     if (path.find("discrete") != std::string::npos)
     {
-        eventType = (uint8_t)EventTypeCodes::discrete;
+        /* parsing the path for exactly event type
+         * get sensor type string from path, path is defined as
+         * /xyz/openbmc_project/sensors/<event type>/<sensor type>/label
+         * And disctere should have format "discrete_<hex>h",
+         * For example "discrete_05h", "discrete_0ch"
+         */
+        size_t discreteStart = path.find("discrete");
+        size_t discreteEnd = path.find("/",discreteStart);
+        std::string discreteString = path.substr(
+            discreteStart, discreteEnd - discreteStart);
+
+        size_t hexStart = discreteString.find("_");
+        if(hexStart == std::string::npos)
+        {
+            /* "discrete" only*/
+            eventType = (uint8_t)EventTypeCodes::discrete;
+        }
+        else
+        {
+            /* discrete_<hex_string>h, get the hex_string out*/
+            std::string hexString = discreteString.substr(
+                hexStart+1, 2);
+            eventType = std::stoi(hexString, 0, 16);
+        }
     }
     else if (path.find("unspecific") != std::string::npos)
     {
diff --git a/include/storagecommands.hpp b/include/storagecommands.hpp
index c9e2bd2..173f936 100644
--- a/include/storagecommands.hpp
+++ b/include/storagecommands.hpp
@@ -70,6 +70,7 @@ enum class SensorUnits : uint8_t
     volts = 0x4,
     amps = 0x5,
     watts = 0x6,
+    cfm = 0x11,
     rpm = 0x12,
 };
 
diff --git a/src/sensorcommands.cpp b/src/sensorcommands.cpp
index 01a3c73..4e6c006 100644
--- a/src/sensorcommands.cpp
+++ b/src/sensorcommands.cpp
@@ -79,6 +79,7 @@ const static boost::container::flat_map<const char*, SensorUnits, CmpStr>
     sensorUnits{{{"temperature", SensorUnits::degreesC},
                  {"voltage", SensorUnits::volts},
                  {"current", SensorUnits::amps},
+                 {"cfm", SensorUnits::cfm},
                  {"fan_tach", SensorUnits::rpm},
                  {"power", SensorUnits::watts}}};
 
-- 
2.17.1

