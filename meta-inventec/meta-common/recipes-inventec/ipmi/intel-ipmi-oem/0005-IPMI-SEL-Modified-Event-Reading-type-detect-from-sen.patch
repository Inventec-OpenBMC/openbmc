From 3cc059e8493001eba1b719858a5ed5dba845a1de Mon Sep 17 00:00:00 2001
From: anonymous <anonymous@inventec.com>
Date: Fri, 24 Jul 2020 14:24:06 -0400
Subject: [PATCH 05/11] Modified Event/Reading type detect from sensor DBUS
 path message event.

Patch to support below event type report when implement SDR discrete event.
The Sensor/Event DBUS path should include below string
and detect to report correct byte.

unspecific = 0x00
threshold = 0x01
discrete = 0x03
specific = 0x6F
oem = 0x70
---
 include/sdrutils.hpp | 51 ++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 48 insertions(+), 3 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 075dd28..703ee2b 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -96,7 +96,7 @@ inline static bool getSensorSubtree(std::shared_ptr<SensorSubTree>& subtree)
         dbus.new_method_call("xyz.openbmc_project.ObjectMapper",
                              "/xyz/openbmc_project/object_mapper",
                              "xyz.openbmc_project.ObjectMapper", "GetSubTree");
-    static constexpr const auto depth = 2;
+    static constexpr const auto depth = 3;
     static constexpr std::array<const char*, 4> interfaces = {
         "xyz.openbmc_project.Sensor.IpmiSensor",
         "xyz.openbmc_project.Sensor.Value",
@@ -175,7 +175,6 @@ inline static bool getSensorNumMap(std::shared_ptr<SensorNumMap>& sensorNumMap)
 
             reply.read(sn);
             sensorNumber = static_cast<uint8_t>(std::get<uint64_t>(sn));
-
             sensorNumMapPtr->insert(
                 SensorNumMap::value_type(sensorNumber, path));
         }
@@ -221,11 +220,13 @@ enum class SensorTypeCodes : uint8_t
     current = 0x3,
     fan = 0x4,
     other = 0xB,
+    oem = 0xC0,
 };
 
 const static boost::container::flat_map<const char*, SensorTypeCodes, CmpStr>
     sensorTypes{{{"temperature", SensorTypeCodes::temperature},
                  {"voltage", SensorTypeCodes::voltage},
+                 {"oem", SensorTypeCodes::oem},
                  {"current", SensorTypeCodes::current},
                  {"fan_tach", SensorTypeCodes::fan},
                  {"fan_pwm", SensorTypeCodes::fan},
@@ -267,6 +268,7 @@ inline static uint16_t getSensorNumberFromPath(const std::string& path)
 {
     std::shared_ptr<SensorNumMap> sensorNumMapPtr;
     details::getSensorNumMap(sensorNumMapPtr);
+
     if (!sensorNumMapPtr)
     {
         return invalidSensorNumber;
@@ -283,10 +285,53 @@ inline static uint16_t getSensorNumberFromPath(const std::string& path)
     }
 }
 
+enum class EventTypeCodes : uint8_t
+{
+    unspecific = 0x00,
+    threshold = 0x01,
+    discrete = 0x03,
+    specific = 0x6F,
+    oem = 0x70,
+};
+
+inline static uint8_t getEventTypeStringFromPath(const std::string& path)
+{
+    uint8_t eventType = 0xFF;
+
+    if (path.find("discrete") != std::string::npos)
+    {
+        eventType = (uint8_t)EventTypeCodes::discrete;
+    }
+    else if (path.find("unspecific") != std::string::npos)
+    {
+        eventType = (uint8_t)EventTypeCodes::unspecific;
+    }
+    else if (path.find("specific") != std::string::npos)
+    {
+        eventType = (uint8_t)EventTypeCodes::specific;
+    }
+    else if (path.find("oem") != std::string::npos)
+    {
+        eventType = (uint8_t)EventTypeCodes::oem;
+    }
+    
+    return eventType;
+}
+
 inline static uint8_t getSensorEventTypeFromPath(const std::string& path)
 {
     // TODO: Add support for additional reading types as needed
-    return 0x1; // reading type = threshold
+
+    uint8_t type = getEventTypeStringFromPath(path);
+
+    if (type != 0xFF)
+    {
+        return type;
+    }
+    else
+    {
+        return (uint8_t)EventTypeCodes::threshold; // default return 0x01
+    }
 }
 
 inline static std::string getPathFromSensorNumber(uint16_t sensorNum)
-- 
2.7.4

