From 4ea634955b0f0ed67e1fbe114c13effe7579b9c0 Mon Sep 17 00:00:00 2001
From: anonymous <anonymous@inventec.com>
Date: Tue, 30 Jun 2020 18:28:15 -0400
Subject: [PATCH 02/11] Patch sensor reading command to get sensor number from
 dbus

Patch sensor reading command to get sensor number from dbus
- Find sensor number from dbus to get sensor current value
---
 include/sdrutils.hpp   | 16 ++++++++++++----
 src/sensorcommands.cpp | 52 +++++++++++++++++++++++++-------------------------
 2 files changed, 38 insertions(+), 30 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 43a53fd..3c66f94 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -97,7 +97,8 @@ inline static bool getSensorSubtree(std::shared_ptr<SensorSubTree>& subtree)
                              "/xyz/openbmc_project/object_mapper",
                              "xyz.openbmc_project.ObjectMapper", "GetSubTree");
     static constexpr const auto depth = 2;
-    static constexpr std::array<const char*, 3> interfaces = {
+    static constexpr std::array<const char*, 4> interfaces = {
+        "xyz.openbmc_project.Sensor.IpmiSensor",
         "xyz.openbmc_project.Sensor.Value",
         "xyz.openbmc_project.Sensor.Threshold.Warning",
         "xyz.openbmc_project.Sensor.Threshold.Critical"};
@@ -382,7 +383,7 @@ static inline const std::string* getSensorConfigurationInterface(
 static inline void updateIpmiFromAssociation(const std::string& path,
                                              const SensorMap& sensorMap,
                                              uint8_t& entityId,
-                                             uint8_t& entityInstance)
+                                             uint8_t& entityInstance, uint8_t& sensorNumber)
 {
     namespace fs = std::filesystem;
 
@@ -487,6 +488,7 @@ static inline void updateIpmiFromAssociation(const std::string& path,
 
         entityIdProp = configurationProperties.find("EntityId");
         entityInstanceProp = configurationProperties.find("EntityInstance");
+        auto sensorNumberProp = configurationProperties.find("SensorNum");
         if (entityIdProp != configurationProperties.end())
         {
             entityId =
@@ -497,6 +499,11 @@ static inline void updateIpmiFromAssociation(const std::string& path,
             entityInstance = static_cast<uint8_t>(
                 std::get<uint64_t>(entityInstanceProp->second));
         }
+        if (sensorNumberProp != configurationProperties.end())
+        {
+            sensorNumber = static_cast<uint8_t>(
+                std::get<uint64_t>(sensorNumberProp->second));
+        }
 
         // stop searching Association records.
         break;
@@ -504,8 +511,9 @@ static inline void updateIpmiFromAssociation(const std::string& path,
 
     if constexpr (debug)
     {
-        std::fprintf(stderr, "path=%s, entityId=%d, entityInstance=%d\n",
-                     path.c_str(), entityId, entityInstance);
+        std::fprintf(stderr, "path=%s, entityId=%d, entityInstance=%d, sensorNumber=%d\n",
+                     path.c_str(), entityId, entityInstance, sensorNumber);
+
     }
 }
 
diff --git a/src/sensorcommands.cpp b/src/sensorcommands.cpp
index 98051e5..5bf11b0 100644
--- a/src/sensorcommands.cpp
+++ b/src/sensorcommands.cpp
@@ -1129,7 +1129,6 @@ static int getSensorDataRecords(ipmi::Context::ptr ctx)
                                       sizeof(get_sdr::SensorDataRecordHeader);
         record.key.owner_id = 0x20;
         record.key.owner_lun = lun;
-        record.key.sensor_number = sensornumber;
 
         record.body.sensor_capabilities = 0x68; // auto rearm - todo hysteresis
         record.body.sensor_type = getSensorTypeFromPath(path);
@@ -1155,7 +1154,8 @@ static int getSensorDataRecords(ipmi::Context::ptr ctx)
 
         // follow the association chain to get the parent board's entityid and
         // entityInstance
-        updateIpmiFromAssociation(path, sensorMap, entityId, entityInstance);
+        updateIpmiFromAssociation(path, sensorMap, entityId, entityInstance, sensornumber);
+        record.key.sensor_number = sensornumber;
 
         record.body.entity_id = entityId;
         record.body.entity_instance = entityInstance;
@@ -1246,7 +1246,7 @@ static int getSensorDataRecords(ipmi::Context::ptr ctx)
             name = path.substr(nameStart + 1, std::string::npos - nameStart);
         }
 
-        std::replace(name.begin(), name.end(), '_', ' ');
+        //std::replace(name.begin(), name.end(), '_', ' ');
         if (name.size() > FULL_RECORD_ID_STR_MAX_LENGTH)
         {
             // try to not truncate by replacing common words
@@ -1680,38 +1680,38 @@ void registerSensorFunctions()
     // versions
 
     // <Get SDR Repository Info>
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
-                          ipmi::storage::cmdGetSdrRepositoryInfo,
-                          ipmi::Privilege::User,
-                          ipmiStorageGetSDRRepositoryInfo);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
+    //-                      ipmi::storage::cmdGetSdrRepositoryInfo,
+    //-                      ipmi::Privilege::User,
+    //-                      ipmiStorageGetSDRRepositoryInfo);
 
     // <Get Device SDR Info>
-    ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnSensor,
-                          ipmi::sensor_event::cmdGetDeviceSdrInfo,
-                          ipmi::Privilege::User, ipmiSensorGetDeviceSdrInfo);
+    //ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnSensor,
+    //                      ipmi::sensor_event::cmdGetDeviceSdrInfo,
+    //                      ipmi::Privilege::User, ipmiSensorGetDeviceSdrInfo);
 
     // <Get SDR Allocation Info>
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
-                          ipmi::storage::cmdGetSdrRepositoryAllocInfo,
-                          ipmi::Privilege::User,
-                          ipmiStorageGetSDRAllocationInfo);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
+    //-                      ipmi::storage::cmdGetSdrRepositoryAllocInfo,
+    //-                      ipmi::Privilege::User,
+    //-                      ipmiStorageGetSDRAllocationInfo);
 
     // <Reserve SDR Repo>
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
-                          ipmi::sensor_event::cmdReserveDeviceSdrRepository,
-                          ipmi::Privilege::User, ipmiStorageReserveSDR);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
+    //-                      ipmi::sensor_event::cmdReserveDeviceSdrRepository,
+    //-                      ipmi::Privilege::User, ipmiStorageReserveSDR);
 
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
-                          ipmi::storage::cmdReserveSdrRepository,
-                          ipmi::Privilege::User, ipmiStorageReserveSDR);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
+    //-                      ipmi::storage::cmdReserveSdrRepository,
+    //-                      ipmi::Privilege::User, ipmiStorageReserveSDR);
 
     // <Get Sdr>
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
-                          ipmi::sensor_event::cmdGetDeviceSdr,
-                          ipmi::Privilege::User, ipmiStorageGetSDR);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnSensor,
+    //-                      ipmi::sensor_event::cmdGetDeviceSdr,
+    //-                      ipmi::Privilege::User, ipmiStorageGetSDR);
 
-    ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
-                          ipmi::storage::cmdGetSdr, ipmi::Privilege::User,
-                          ipmiStorageGetSDR);
+    //-ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
+    //-                      ipmi::storage::cmdGetSdr, ipmi::Privilege::User,
+    //-                      ipmiStorageGetSDR);
 }
 } // namespace ipmi
-- 
2.7.4

