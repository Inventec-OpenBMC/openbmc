From a61e16b2370a033898f9832e13cdc3fad6ed6d9d Mon Sep 17 00:00:00 2001
From: "Fred.Chang" <chang.fredys@inventec.com>
Date: Wed, 1 Sep 2021 07:01:41 +0000
Subject: [PATCH] support mmap smbios table from video shared memory
 automatically.

Symptom/Reason :
	- mmap smbios table from video shared memory

Root Cause:
	- Support SMBIOS table for RedFish.

Solution/Change:
	[smbios-mdr]
			- Add a automatic mechanism to mmap video shared memory if it lacks of smbios2 file

Entry Test:
	# busctl tree xyz.openbmc_project.Smbios.MDR_V2
	`-/xyz
	  `-/xyz/openbmc_project
		|-/xyz/openbmc_project/Smbios
		| `-/xyz/openbmc_project/Smbios/MDR_V2
		`-/xyz/openbmc_project/inventory
		  `-/xyz/openbmc_project/inventory/system
			`-/xyz/openbmc_project/inventory/system/chassis
			  `-/xyz/openbmc_project/inventory/system/chassis/motherboard
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/bios
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu2
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu3
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7
				|-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8
				`-/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9
---
 include/mdrv2.hpp        |  7 ++++
 include/smbios_mdrv2.hpp |  0
 src/mdrv2.cpp            | 71 +++++++++++++++++++++++++++++++++++++++-
 3 files changed, 77 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 include/mdrv2.hpp
 mode change 100644 => 100755 include/smbios_mdrv2.hpp
 mode change 100644 => 100755 src/mdrv2.cpp

diff --git a/include/mdrv2.hpp b/include/mdrv2.hpp
old mode 100644
new mode 100755
index 8f03579..e5e0f69
--- a/include/mdrv2.hpp
+++ b/include/mdrv2.hpp
@@ -49,6 +49,12 @@ static constexpr const char* smbiosInterfaceName =
     "xyz.openbmc_project.Smbios.GetRecordType";
 constexpr const int limitEntryLen = 0xff;
 
+//static constexpr const char* vgaMemPath = "/dev/mem";
+//static constexpr const uint32_t vgaMemPhyAddr = 0xbff00000;
+static constexpr const char* vgaMemPath = "/dev/vgasharedmem";
+static constexpr const uint32_t vgaMemPhyAddr = 0x0;
+static constexpr const uint32_t vgaMemPhySize = 64 * 1024;
+
 class MDR_V2 :
     sdbusplus::server::object::object<
         sdbusplus::xyz::openbmc_project::Smbios::server::MDR_V2>
@@ -123,6 +129,7 @@ class MDR_V2 :
     Mdr2DirStruct smbiosDir;
 
     bool readDataFromFlash(MDRSMBIOSHeader* mdrHdr, uint8_t* data);
+    bool readDataFromMem(MDRSMBIOSHeader* mdrHdr, uint8_t* data);
 
     const std::array<uint8_t, 16> smbiosTableId{
         40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0x42};
diff --git a/include/smbios_mdrv2.hpp b/include/smbios_mdrv2.hpp
old mode 100644
new mode 100755
diff --git a/src/mdrv2.cpp b/src/mdrv2.cpp
old mode 100644
new mode 100755
index 00fbdcc..2ce4b51
--- a/src/mdrv2.cpp
+++ b/src/mdrv2.cpp
@@ -17,6 +17,7 @@
 #include "mdrv2.hpp"
 
 #include <sys/mman.h>
+#include <unistd.h>
 
 #include <phosphor-logging/elog-errors.hpp>
 #include <sdbusplus/exception.hpp>
@@ -29,6 +30,7 @@ namespace phosphor
 namespace smbios
 {
 
+
 std::vector<uint8_t> MDR_V2::getDirectoryInformation(uint8_t dirIndex)
 {
     std::vector<uint8_t> responseDir;
@@ -210,7 +212,8 @@ bool MDR_V2::readDataFromFlash(MDRSMBIOSHeader* mdrHdr, uint8_t* data)
     {
         phosphor::logging::log<phosphor::logging::level::ERR>(
             "Read data from flash error - Open MDRV2 table file failure");
-        return false;
+        //return false;
+        return readDataFromMem(mdrHdr, data);
     }
     smbiosFile.clear();
     smbiosFile.seekg(0, std::ios_base::end);
@@ -243,6 +246,66 @@ bool MDR_V2::readDataFromFlash(MDRSMBIOSHeader* mdrHdr, uint8_t* data)
     return true;
 }
 
+bool MDR_V2::readDataFromMem(MDRSMBIOSHeader* mdrHdr, uint8_t* data)
+{
+    if (mdrHdr == nullptr)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "Read data from mem error - Invalid mdr header");
+        return false;
+    }
+    if (data == nullptr)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "Read data from mem error - Invalid data point");
+        return false;
+    }
+
+    mdrHdr->mdrType = mdrTypeII;
+    mdrHdr->dirVer = smbiosTableVersion;
+    mdrHdr->timestamp = smbiosTableTimestamp;
+    mdrHdr->dataSize = smbiosTableStorageSize;
+
+    int memDriver = 0;
+
+    // open mem driver for the system memory access
+    memDriver = open(vgaMemPath, O_RDONLY);
+    if (memDriver < 0)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "Cannot access mem driver");
+        return false;
+    }
+    unsigned int page_size = getpagesize();
+    // map the system memory
+    void* vPtr = mmap(NULL,                       // where to map to: don't mind
+                vgaMemPhySize,                   // how many bytes ?
+                PROT_READ,                  // want to read and write
+                MAP_SHARED,                 // no copy on write
+                memDriver,                  // handle to /dev/mem
+                vgaMemPhyAddr & ~(off_t)(page_size - 1)); // hopefully the Text-buffer :-)
+
+
+    if (vPtr == MAP_FAILED)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "Failed to map share memory");
+        close(memDriver);
+        return false;
+    }
+
+    uint8_t* destAddr = data;
+    uint8_t* sourceAddr = reinterpret_cast<uint8_t*>(vPtr);
+    std::copy(sourceAddr, sourceAddr + vgaMemPhySize, destAddr);
+    munmap(vPtr, vgaMemPhySize);
+    close(memDriver);
+
+    phosphor::logging::log<phosphor::logging::level::INFO>(
+            "Read data from mem success");
+
+    return true;
+}
+
 bool MDR_V2::sendDirectoryInformation(uint8_t dirVersion, uint8_t dirIndex,
                                       uint8_t returnedEntries,
                                       uint8_t remainingEntries,
@@ -500,6 +563,12 @@ bool MDR_V2::agentSynchronizeData()
     }
     else
     {
+        uint32_t mark = *(reinterpret_cast<uint32_t*>(smbiosDir.dir[smbiosDirIndex].dataStorage));
+        if(mark != 0x5F4D535F && mark != 0x334D535F) {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "agent data sync failed - smbios format error: not start from \"_SM_\" or \"_SM3_\".");
+            return false;
+        }
         systemInfoUpdate();
         smbiosDir.dir[smbiosDirIndex].common.dataVersion = mdr2SMBIOS.dirVer;
         smbiosDir.dir[smbiosDirIndex].common.timestamp = mdr2SMBIOS.timestamp;
