From 2b31d2606078f7b178ffcc97e4566f751b971030 Mon Sep 17 00:00:00 2001
From: Ashwini Udupa <udupa.ashwini@inventec.com>
Date: Sat, 26 Jun 2021 12:35:13 -0700
Subject: [PATCH] Gateway IP fix

---
 redfish-core/lib/ethernet.hpp | 34 ++++++++++++++++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index 5ae238d..a07e56c 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -1445,8 +1445,6 @@ class EthernetInterface : public Node
                 const std::string* gw = nullptr;
                 uint8_t prefixLength = 0;
                 bool errorInEntry = false;
-                uint8_t firstbyte = 1, i = 0;
-                char* endPtr;
 
                 if (address)
                 {
@@ -1454,6 +1452,8 @@ class EthernetInterface : public Node
                     {
                         addr = &(*address);
                         BMCWEB_LOG_DEBUG << "IPv4 address - " << *addr;
+                        uint8_t firstbyte = 1, i = 0;
+                        char* endPtr;
                         std::vector<std::string> bytesInMask;
                         boost::split(bytesInMask, (*addr), boost::is_any_of("."));
                         for (const std::string& byte : bytesInMask)
@@ -1533,6 +1533,36 @@ class EthernetInterface : public Node
                     if (ipv4VerifyIpAndGetBitcount(*gateway))
                     {
                         gw = &(*gateway);
+                        BMCWEB_LOG_DEBUG << "IPv4 Gateway - " << *gw;
+                        uint8_t firstbyte = 1, i = 0;
+                        char* endPtr;
+                        std::vector<std::string> bytesInMask;
+                        boost::split(bytesInMask, (*gw), boost::is_any_of("."));
+                        for (const std::string& byte : bytesInMask)
+                        {
+                           long value = std::strtol(byte.c_str(), &endPtr, 10);
+                           if (firstbyte)
+                          {
+                             if (value == 127)   //checking for loopback IP
+                             {
+                              messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
+                               errorInEntry = true;
+                             }
+
+                             if (value >=224 && value <=239)     //checking for multicast IP
+                             {
+                               messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
+                               errorInEntry = true;
+                             }
+                            firstbyte =0;
+                           }
+                           i++;
+                           if ( i == 4 && (value == 255 || value == 0))      //checking for network ID & broadcast IP
+                           {
+                               messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
+                               errorInEntry = true;
+                           }                         
+                         }
                     }
                     else
                     {
-- 
2.7.4

