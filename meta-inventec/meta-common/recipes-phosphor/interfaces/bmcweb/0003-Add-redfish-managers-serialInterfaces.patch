diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index 5d5eb7b..da6c7ce 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -84,6 +84,7 @@ class RedfishService
         nodes.emplace_back(std::make_unique<ChassisResetActionInfo>(app));
         nodes.emplace_back(std::make_unique<UpdateService>(app));
         nodes.emplace_back(std::make_unique<StorageCollection>(app));
+        nodes.emplace_back(std::make_unique<SerialInterfaces>(app));
         nodes.emplace_back(std::make_unique<Storage>(app));
         nodes.emplace_back(std::make_unique<Drive>(app));
 #ifdef BMCWEB_INSECURE_ENABLE_REDFISH_FW_TFTP_UPDATE
diff --git a/redfish-core/lib/managers.hpp b/redfish-core/lib/managers.hpp
index 6347caf..5c700b8 100644
--- a/redfish-core/lib/managers.hpp
+++ b/redfish-core/lib/managers.hpp
@@ -1686,6 +1686,46 @@ struct SetPIDValues : std::enable_shared_from_this<SetPIDValues>
     size_t objectCount = 0;
 };
 
+class SerialInterfaces : public Node
+{
+  public:
+    SerialInterfaces(App& app) :
+        Node(app, "/redfish/v1/Managers/bmc/SerialInterfaces/")
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::put, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureManager"}}},
+            {boost::beast::http::verb::post, {{"ConfigureManager"}}}};
+    }
+
+  private:
+    void doGet(crow::Response& res, const crow::Request&,
+               const std::vector<std::string>&) override
+    {
+        std::shared_ptr<AsyncResp> asyncResp = std::make_shared<AsyncResp>(res);
+
+        getData(asyncResp);
+    }
+
+    
+    void getData(const std::shared_ptr<AsyncResp>& asyncResp)
+    {
+        asyncResp->res.jsonValue["@odata.type"] =
+            "#SerialInterface.v1_5_0.SerialInterface";
+        asyncResp->res.jsonValue["@odata.id"] =
+            "/redfish/v1/Managers/bmc/SerialInterfaces";
+        asyncResp->res.jsonValue["Id"] = "TTY0";
+        asyncResp->res.jsonValue["Name"] = "Manager Serial Interface";
+        asyncResp->res.jsonValue["Description"] = "Management for Serial Interface";
+        asyncResp->res.jsonValue["SignalType"] = "Rs232";
+        asyncResp->res.jsonValue["BitRate"] = "115200";
+        asyncResp->res.jsonValue["FlowControl"] = "None";
+    }
+};
+
 class Manager : public Node
 {
   public:
@@ -1718,6 +1758,9 @@ class Manager : public Node
         res.jsonValue["ServiceEntryPointUUID"] = uuid;
         res.jsonValue["Model"] = "OpenBmc"; // TODO(ed), get model
 
+        res.jsonValue["SerialInterfaces"] = {
+		{"@odata.id", "/redfish/v1/Managers/bmc/SerialInterfaces"}};
+
         res.jsonValue["LogServices"] = {
             {"@odata.id", "/redfish/v1/Managers/bmc/LogServices"}};
 
