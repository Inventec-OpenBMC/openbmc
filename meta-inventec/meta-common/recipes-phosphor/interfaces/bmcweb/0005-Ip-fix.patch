From 209459a235d6a12b65431444bc93c8e88760b67f Mon Sep 17 00:00:00 2001
From: Ashwini Udupa <udupa.ashwini@inventec.com>
Date: Mon, 21 Jun 2021 12:11:40 -0700
Subject: [PATCH 5/6] Ip fix

%% original patch: 0007-static-ip-fix.patch
---
 redfish-core/lib/ethernet.hpp | 34 ++++++++++++++++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index 3e10599..a06e8c4 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -627,8 +627,7 @@ inline bool ipv4VerifyIpAndGetBitcount(const std::string& ip,
     if (bytesInMask.size() != ipV4AddressSectionsCount)
     {
         return false;
-    }
-
+    }    
     if (bits != nullptr)
     {
         *bits = 0;
@@ -637,6 +636,7 @@ inline bool ipv4VerifyIpAndGetBitcount(const std::string& ip,
     char* endPtr;
     long previousValue = 255;
     bool firstZeroInByteHit;
+
     for (const std::string& byte : bytesInMask)
     {
         if (byte.empty())
@@ -1496,6 +1496,36 @@ class EthernetInterface : public Node
                     if (ipv4VerifyIpAndGetBitcount(*address))
                     {
                         addr = &(*address);
+                        BMCWEB_LOG_DEBUG << "IPv4 address - " << *addr;
+                        int firstbyte=1,i=0;
+                        char* endPtr;
+                        std::vector<std::string> bytesInMask;
+                        boost::split(bytesInMask, (*addr), boost::is_any_of("."));
+                        for (const std::string& byte : bytesInMask)
+                        {
+                           long value = std::strtol(byte.c_str(), &endPtr, 10);
+                           if (firstbyte)
+                           {
+                             if (value == 127)   //checking for loopback IP
+                             {
+                               messages::propertyValueTypeError(asyncResp->res, *address, pathString + "/Address");
+                               errorInEntry = true;
+                             }
+
+                             if (value >=224 && value <=239)     //checking for multicast IP
+                             {
+                               messages::propertyValueTypeError(asyncResp->res, *address, pathString + "/Address");
+                               errorInEntry = true;
+                             }
+                             firstbyte =0;
+                           }
+                           i++;
+                           if ( i==4 && value == 255)      //checking for broadcast IP
+                           {
+                               messages::propertyValueTypeError(asyncResp->res, *address, pathString + "/Address");
+                               errorInEntry = true;
+                           }
+                         }
                     }
                     else
                     {
-- 
2.7.4

