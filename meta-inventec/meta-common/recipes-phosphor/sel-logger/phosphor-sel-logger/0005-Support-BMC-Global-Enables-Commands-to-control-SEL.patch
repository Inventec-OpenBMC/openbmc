From deb97c6b3e0dea7376d3f02ed92b6f9e502f62ec Mon Sep 17 00:00:00 2001
From: cynthia <wu.cynthia@inventec.com>
Date: Fri, 5 Nov 2021 21:31:41 +0800
Subject: [PATCH] Support BMC Global Enables Commands to control SEL

    Symptom/Reason :
         Support to enable/disable adding new SEL log with global enables
	setting

    Root Cause:
        N/A

    Solution/Change:
	[sel-logger.cpp]
	Allow/forbid to add new SEL log in "IpmiSelAdd" and "IpmiSelAddOem"
	based on SEL state in Global Enable setting

    Entry Test:
	1, check global enable setting
	   ipmitool mc getenables
	2. add new SEL log
           ipmitool event 1
        3. check sel
	   ipmitool sel list
---
 include/sel_logger.hpp |  4 ++++
 src/sel_logger.cpp     | 51 +++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 54 insertions(+), 1 deletion(-)

diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
index 4b877ea..ab5a6b9 100644
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -22,6 +22,10 @@ static constexpr char const* ipmiSelPath = "/xyz/openbmc_project/Logging/IPMI";
 static constexpr char const* ipmiSelAddInterface =
     "xyz.openbmc_project.Logging.IPMI";
 
+static constexpr char const* SettingService = "xyz.openbmc_project.Settings";
+static constexpr char const* GlobalEnableObj = "/xyz/openbmc_project/ipmi/global_enables";
+static constexpr char const* DbusPropIntf = "org.freedesktop.DBus.Properties";
+static constexpr char const* GlobalEnableIntf = "xyz.openbmc_project.Ipmi.GlobalEnables";
 // ID string generated using journalctl to include in the MESSAGE_ID field for
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr char const* selMessageId = "b370836ccf2f4850ac5bee185b77893a";
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index 1956111..3d948f4 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -33,6 +33,7 @@
 #include <iomanip>
 #include <iostream>
 #include <sstream>
+#include <variant>
 
 #ifdef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
 #include <phosphor-logging/elog-errors.hpp>
@@ -45,6 +46,8 @@ using SELCreated =
     sdbusplus::xyz::openbmc_project::Logging::SEL::Error::Created;
 #endif
 
+bool SEL_Enable = true;
+
 struct DBusInternalError final : public sdbusplus::exception_t
 {
     const char* name() const noexcept override
@@ -193,6 +196,12 @@ static uint16_t
                        const std::vector<uint8_t>& selData, const bool& assert,
                        const uint16_t& genId, T&&... metadata)
 {
+    /*If SEL isn't enabled*/
+    if(!SEL_Enable){
+        fprintf(stderr, "%s: Can't add new SEL entry, SEL isn't enabled!\n", __FUNCTION__);
+        return -1;
+    }
+
     // Only 3 bytes of SEL event data are allowed in a system record
     if (selData.size() > selEvtDataMaxSize)
     {
@@ -230,6 +239,13 @@ static uint16_t selAddOemRecord(const std::string& message,
                                 const std::vector<uint8_t>& selData,
                                 const uint8_t& recordType)
 {
+
+    /*If SEL isn't enabled*/
+    if(!SEL_Enable){
+        fprintf(stderr, "%s: Can't add new SEL entry, SEL isn't enabled!\n", __FUNCTION__);
+        return -1;
+    }
+
     // A maximum of 13 bytes of SEL event data are allowed in an OEM record
     if (selData.size() > selOemDataMaxSize)
     {
@@ -275,12 +291,31 @@ int main(int argc, char *argv[])
     // setup connection to dbus
     boost::asio::io_service io;
     auto conn = std::make_shared<sdbusplus::asio::connection>(io);
+    std::variant<double, bool> sel_value;
 
     if (getClearSelLogFiles())
     {
         delClearSelLogFiles();
     }
 
+    /*get SEL default value from setting manager*/
+    sdbusplus::message::message getsel = conn ->new_method_call(
+        SettingService, GlobalEnableObj, DbusPropIntf, "Get");
+    getsel.append(GlobalEnableIntf, "SEL");
+
+    try
+    {
+        sdbusplus::message::message reloadResponse = conn->call(getsel);
+        reloadResponse.read(sel_value);
+        SEL_Enable = std::visit(ipmi::VariantToDoubleVisitor(), sel_value);
+
+    }catch (const sdbusplus::exception_t&)
+    {
+        SEL_Enable = true;
+        std::cerr << "error getting global enable setting, set default (true) "
+                  << "\n";
+    }
+
     // IPMI SEL Object
     conn->request_name(ipmiSelObject);
     auto server = sdbusplus::asio::object_server(conn);
@@ -318,7 +353,21 @@ int main(int argc, char *argv[])
                                    [&](unsigned int& propertyValue) {
                                        propertyValue = recordIndex;
                                        return propertyValue;
-                                   });
+                                   });                                  
+    ifaceAddSel->register_property("SEL_Enable", SEL_Enable,
+                                   // set handle
+                                   [&](const bool& status, 
+                                       bool& propertyValue) {
+                                       SEL_Enable = status;
+                                       return 1;
+                                   },
+                                   // get handle
+                                   [&](bool& propertyValue) {
+                                       propertyValue = SEL_Enable;
+                                       return propertyValue;
+                                   }                                   
+        ); 
+
     recordIndex = initializeRecordId();
 
     ifaceAddSel->initialize();
-- 
2.17.1

