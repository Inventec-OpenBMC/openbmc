From 4c39d0d12a426cb3c640194e8cba0696611eb2ed Mon Sep 17 00:00:00 2001
From: anonymous <anonymous@inventec.com>
Date: Thu, 13 Aug 2020 15:46:36 -0400
Subject: [PATCH] Subject: [PATCH] Subject: [PATCH][Sensor] Patch to support
 IPMI sensor info and add IPMI sel

- Support retrieving IPMI information from entity-manager inventory
- Add the dbus-interface definitions of IPMI logging service in Utils.hpp for recording IPMI SEL.
- Add a hook function in the setupPowerMatch function.
---
 include/IpmiInfo.hpp | 33 ++++++++++++++++++++
 include/Utils.hpp    | 12 ++++++++
 include/sensor.hpp   |  7 +++++
 src/IpmiInfo.cpp     | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/Utils.cpp        | 18 +++++++++++
 src/meson.build      |  9 ++++++
 6 files changed, 165 insertions(+)
 create mode 100644 include/IpmiInfo.hpp
 create mode 100644 src/IpmiInfo.cpp

diff --git a/include/IpmiInfo.hpp b/include/IpmiInfo.hpp
new file mode 100644
index 0000000..68d29cb
--- /dev/null
+++ b/include/IpmiInfo.hpp
@@ -0,0 +1,33 @@
+#pragma once
+#include "Utils.hpp"
+
+#include <boost/asio/io_service.hpp>
+#include <list>
+#include <memory>
+#include <nlohmann/json.hpp>
+#include <string>
+#include <utility>
+#include <vector>
+
+namespace ipmidata
+{
+
+struct IpmiConfig
+{
+    IpmiConfig(const uint64_t num, 
+               const uint64_t id, 
+               const uint64_t ins) :
+              number(num), entityId(id), entityIns(ins)
+    {
+    }
+    uint64_t number;
+    uint64_t entityId;
+    uint64_t entityIns;
+};
+
+bool parseIpmiDataFromConfig(
+    const SensorData& sensorData,
+    std::vector<ipmidata::IpmiConfig>& ipmiVector,
+    std::string* matchLabel = nullptr);
+
+} // namespace ipmidata
diff --git a/include/Utils.hpp b/include/Utils.hpp
index d2ab5ca..2e011d6 100644
--- a/include/Utils.hpp
+++ b/include/Utils.hpp
@@ -72,6 +72,10 @@ void createAssociation(
 void findLimits(std::pair<double, double>& limits,
                 const SensorBaseConfiguration* data);
 
+// to setup a hook function pointer which can be used to do some action immediately once recieve dbus signal of power status match
+void setupPowerStatHookHandlr(std::function<void(bool)> hookHandlr);
+
+
 enum class PowerState
 {
     on,
@@ -79,6 +83,14 @@ enum class PowerState
     always
 };
 
+namespace sel
+{
+const static constexpr char* service = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* interface = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* path = "/xyz/openbmc_project/Logging/IPMI";
+const static constexpr char* addsel = "IpmiSelAdd";
+} // namespace sel
+
 namespace mapper
 {
 constexpr const char* busName = "xyz.openbmc_project.ObjectMapper";
diff --git a/include/sensor.hpp b/include/sensor.hpp
index d1fb22e..4f4d93f 100644
--- a/include/sensor.hpp
+++ b/include/sensor.hpp
@@ -3,6 +3,7 @@
 #include <SensorPaths.hpp>
 #include <Thresholds.hpp>
 #include <Utils.hpp>
+#include <IpmiInfo.hpp>
 #include <sdbusplus/asio/object_server.hpp>
 
 #include <limits>
@@ -61,6 +62,7 @@ struct Sensor
     double minValue;
     std::vector<thresholds::Threshold> thresholds;
     std::shared_ptr<sdbusplus::asio::dbus_interface> sensorInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ipmiInterface;
     std::shared_ptr<sdbusplus::asio::dbus_interface> thresholdInterfaceWarning;
     std::shared_ptr<sdbusplus::asio::dbus_interface> thresholdInterfaceCritical;
     std::shared_ptr<sdbusplus::asio::dbus_interface> association;
@@ -326,6 +328,11 @@ struct Sensor
             operationalInterface->register_property("Functional", true);
             operationalInterface->initialize();
         }
+
+        if (ipmiInterface && !ipmiInterface->initialize())
+        {
+            std::cerr << "error initializing ipmi interface\n";
+        }
     }
 
     bool readingStateGood()
diff --git a/src/IpmiInfo.cpp b/src/IpmiInfo.cpp
new file mode 100644
index 0000000..4187f68
--- /dev/null
+++ b/src/IpmiInfo.cpp
@@ -0,0 +1,86 @@
+#include "IpmiInfo.hpp"
+
+#include "VariantVisitors.hpp"
+#include "sensor.hpp"
+
+#include <array>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_map.hpp>
+#include <boost/lexical_cast.hpp>
+#include <cmath>
+
+#include <fstream>
+#include <iostream>
+#include <stdexcept>
+#include <string>
+#include <utility>
+#include <variant>
+#include <vector>
+
+static constexpr bool DEBUG = false;
+
+namespace ipmidata
+{
+
+bool parseIpmiDataFromConfig(
+    const SensorData& sensorData,
+    std::vector<ipmidata::IpmiConfig>& ipmiVector,
+    std::string* matchLabel)
+{
+
+    for (const auto& item : sensorData)
+    {
+        if constexpr (DEBUG)
+        {
+            std::cout << "parseIpmiDataFromConfig " << *matchLabel  << "\n";
+        }
+
+        if (item.first.find("SensorInfo") == std::string::npos)
+        {
+            continue;
+        }
+
+        if (matchLabel != nullptr)
+        {
+            auto labelFind = item.second.find("Label");
+            if (labelFind == item.second.end())
+                continue;
+
+            if constexpr (DEBUG)
+            {
+                std::cout << "Label: " << std::visit(VariantToStringVisitor(), labelFind->second) << " NAME: " << *matchLabel << "\n";
+            }
+
+            if (std::visit(VariantToStringVisitor(), labelFind->second) !=
+                *matchLabel)
+                continue;
+        }
+
+        auto configurationSN = item.second.find("SensorNum");
+        auto configurationEID = item.second.find("EntityId");
+        auto configurationEIS = item.second.find("EntityInstance");
+        if (configurationSN == item.second.end() ||
+            configurationEID == item.second.end() ||
+            configurationEIS == item.second.end())
+        {
+            std::cout << "Missing ipmi data in configuration\n";
+            return false;
+        }
+
+        uint64_t sn =  std::visit(VariantToUnsignedIntVisitor(), configurationSN->second);
+        uint64_t id =  std::visit(VariantToUnsignedIntVisitor(), configurationEID->second);
+        uint64_t is =  std::visit(VariantToUnsignedIntVisitor(), configurationEIS->second);
+
+        if constexpr (DEBUG)
+        {
+            std::cerr << "SN: "  << sn << " "
+                      << "EID: " << id << " "
+                      << "EIS: " << is << "\n";
+        }
+        ipmiVector.emplace_back(sn, id, is);
+        return true; // Get match IPMI info and then return
+    }
+    return true;
+}
+
+} // namespace ipmidata
diff --git a/src/Utils.cpp b/src/Utils.cpp
index 5217129..d761e98 100644
--- a/src/Utils.cpp
+++ b/src/Utils.cpp
@@ -125,6 +125,22 @@ std::set<std::string> getPermitSet(const SensorBaseConfigMap& config)
     }
     return permitSet;
 }
+// Define a hook function pointer which can be used to do some action immediately once recieve dbus signal of power status match
+static std::function<void(bool)> powerStatHookHandlr = [] (bool powerStatus) {
+// It's only for compilers . Otherwise, unused variable powerStatus will be treated as errors.
+        if(!powerStatus)
+            powerStatus=true;
+};
+void setupPowerStatHookHandlr(std::function<void(bool)> hookHandlr)
+{
+    // this a global function for this sensor monitor service, so only need setup at first time
+    static bool set = false;
+    if (!set)
+    {
+        powerStatHookHandlr = std::move(hookHandlr);
+        set = true;
+    }
+}
 
 bool getSensorConfiguration(
     const std::string& type,
@@ -332,6 +348,7 @@ void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
                 {
                     timer.cancel();
                     powerStatusOn = false;
+                    powerStatHookHandlr(powerStatusOn);
                     return;
                 }
                 // on comes too quickly
@@ -347,6 +364,7 @@ void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
                         return;
                     }
                     powerStatusOn = true;
+                    powerStatHookHandlr(powerStatusOn);
                 });
             }
         });
diff --git a/src/meson.build b/src/meson.build
index dc11177..057f26a 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -8,6 +8,7 @@ if get_option('adc').enabled()
         'adcsensor',
         'ADCSensor.cpp',
         'ADCSensorMain.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             gpiodcxx,
             sdbusplus,
@@ -27,6 +28,7 @@ if get_option('cpu').enabled()
         'cpusensor',
         'CPUSensorMain.cpp',
         'CPUSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             gpiodcxx,
             sdbusplus,
@@ -47,6 +49,7 @@ if get_option('exit-air').enabled()
     executable(
         'exitairtempsensor',
         'ExitAirTempSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             sdbusplus,
         ],
@@ -66,6 +69,7 @@ if get_option('fan').enabled()
         'FanMain.cpp',
         'TachSensor.cpp',
         'PwmSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             sdbusplus,
             gpiodcxx
@@ -85,6 +89,7 @@ if get_option('hwmon-temp').enabled()
         'hwmontempsensor',
         'HwmonTempMain.cpp',
         'HwmonTempSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             sdbusplus,
         ],
@@ -121,6 +126,7 @@ if get_option('ipmb').enabled()
     executable(
         'ipmbsensor',
         'IpmbSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             sdbusplus,
         ],
@@ -138,6 +144,7 @@ if get_option('mcu').enabled()
     executable(
         'mcutempsensor',
         'MCUTempSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             i2c,
             sdbusplus,
@@ -157,6 +164,7 @@ if get_option('nvme').enabled()
         'nvmesensor',
         'NVMeSensorMain.cpp',
         'NVMeSensor.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             i2c,
             sdbusplus,
@@ -178,6 +186,7 @@ if get_option('psu').enabled()
         'PSUEvent.cpp',
         'PSUSensor.cpp',
         'PSUSensorMain.cpp',
+        'IpmiInfo.cpp',
         dependencies: [
             sdbusplus,
         ],
-- 
2.7.4

