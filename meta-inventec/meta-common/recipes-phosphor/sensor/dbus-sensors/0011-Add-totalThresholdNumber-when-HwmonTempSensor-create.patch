From f9f56080f3f043c293595c4815be86ceda511419 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Sun, 20 Jun 2021 08:17:24 +0000
Subject: [PATCH] - Add totalThresholdNumber when HwmonTempSensor create

Symptom/Reason:
  For HwmonTempSensor, may have threshold config in one hwmon path, for example "tmp468".
  When setting the threshold, would also modify the property in entity-manager.
  So if we modify the sensor in the extention(temp2, temp3.....),
  would have error to find correct dbus interface.

Root Cause:
  In persistThreshold() in Thresholds.cpp, would find all threshold dbus interface.
  The threshold count default is the thresholds.size().
  But for the extention sensors for tmp468, all of the threshod are config in the temp1.
  And temp1 itself's thresholds only contain it's own. Whis is 4 for normal case.

  Here we need to find all threshold interface, so give the totalThresholdNumber.
  Which is 4*sensor numbers for normal case.

Solution/Change:
  Extend the input requirement for HwmonTempSensor creation.
  And give the label and total threshold size when setInitialProperties()

Entry Test:

THERMAL_Q89      | 23.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q90      | 24.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q91      | 26.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q92      | 26.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q93      | 29.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q94      | 28.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_U6       | 32.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 35.000    | 36.000    | na
THERMAL_U8       | 23.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 55.000    | 56.000    | na
THERMAL_U95      | 27.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na

ipmitool raw 0x04 0x26 0x61 0x01 0x06 0x00 0x00 0x00 0x00 0x00

THERMAL_Q89      | 23.000     | degrees C  | ok    | na        | 5.000     | 6.000     | 65.000    | 70.000    | na
THERMAL_Q90      | 24.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q91      | 26.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q92      | 26.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q93      | 28.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_Q94      | 28.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
THERMAL_U6       | 32.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 35.000    | 36.000    | na
THERMAL_U8       | 24.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 55.000    | 56.000    | na
THERMAL_U95      | 27.000     | degrees C  | ok    | na        | 5.000     | 10.000    | 65.000    | 70.000    | na
---
 include/HwmonTempSensor.hpp |  4 +++-
 src/HwmonTempMain.cpp       | 30 ++++++++++++++++++------------
 src/HwmonTempSensor.cpp     |  9 ++++++---
 3 files changed, 27 insertions(+), 16 deletions(-)

diff --git a/include/HwmonTempSensor.hpp b/include/HwmonTempSensor.hpp
index bbfd829..73ee6f4 100644
--- a/include/HwmonTempSensor.hpp
+++ b/include/HwmonTempSensor.hpp
@@ -22,7 +22,8 @@ class HwmonTempSensor :
                     const float pollRate,
                     std::vector<ipmidata::IpmiConfig>&& ipmiinfo,
                     const std::string& sensorConfiguration,
-                    const PowerState powerState);
+                    const PowerState powerState,
+                    size_t totalThresholdNumber);
     ~HwmonTempSensor() override;
     void setupRead(void);
 
@@ -33,6 +34,7 @@ class HwmonTempSensor :
     boost::asio::streambuf readBuf;
     std::string path;
     unsigned int sensorPollMs;
+    size_t totalThresholdNumber;
 
     void handleResponse(const boost::system::error_code& err);
     void checkThresholds(void) override;
diff --git a/src/HwmonTempMain.cpp b/src/HwmonTempMain.cpp
index 0c9166a..ad3a087 100644
--- a/src/HwmonTempMain.cpp
+++ b/src/HwmonTempMain.cpp
@@ -208,22 +208,27 @@ void createSensors(
 
                 std::vector<thresholds::Threshold> sensorThresholds;
                 int index = 1;
+                size_t totalThresholdNumber = 0;
 
-                if( !strncmp( sensorType, "xyz.openbmc_project.Configuration.TMP468" , strlen(sensorType))) {
+                if (!parseThresholdsFromConfig(*sensorData, sensorThresholds,
+                                               nullptr, &index))
+                {
+                    std::cerr << "error populating thresholds for "
+                          << sensorName << " index 1\n";
+                }
+                /* Counting all threshold config */
+                totalThresholdNumber = sensorThresholds.size();
+
+                /* Replace Threshold for TMP468*/
+                if( !strncmp( sensorType, "xyz.openbmc_project.Configuration.TMP468" , strlen(sensorType)))
+                {
+                    sensorThresholds.clear();
                     std::string thresholdLabel = sensorName.substr(0, sensorName.find(" "));
                     if (!parseThresholdsFromConfig(*sensorData, sensorThresholds,&thresholdLabel, nullptr))
                     {
                         std::cerr << "error populating thresholds for "
                               << sensorName << " index 1\n";
                     }
-                } else {
-
-                    if (!parseThresholdsFromConfig(*sensorData, sensorThresholds,
-                                               nullptr, &index))
-                    {
-                        std::cerr << "error populating thresholds for "
-                              << sensorName << " index 1\n";
-                    }
                 }
 
                 auto findPollRate = baseConfiguration->second.find("PollRate");
@@ -237,7 +242,6 @@ void createSensors(
                         pollRate = pollRateDefault; // polling time too short
                     }
                 }
-
                 auto findPowerOn = baseConfiguration->second.find("PowerState");
                 PowerState readState = PowerState::always;
                 if (findPowerOn != baseConfiguration->second.end())
@@ -264,7 +268,8 @@ void createSensors(
                     sensor = std::make_shared<HwmonTempSensor>(
                         *hwmonFile, sensorType, objectServer, dbusConnection,
                         io, sensorName, std::move(sensorThresholds), pollRate,
-                        std::move(sensorIpmiConfig), *interfacePath, readState);
+                        std::move(sensorIpmiConfig), *interfacePath, 
+                        readState, totalThresholdNumber);
                     sensor->setupRead();
                 }
                 // Looking for keys like "Name1" for temp2_input,
@@ -323,7 +328,8 @@ void createSensors(
                             *hwmonFile, sensorType, objectServer,
                             dbusConnection, io, sensorName,
                             std::move(sensorThresholdsExtra), pollRate, 
-                            std::move(sensorIpmiConfig), *interfacePath, readState);
+                            std::move(sensorIpmiConfig), 
+                            *interfacePath, readState, totalThresholdNumber);
                         sensor->setupRead();
                     }
                 }
diff --git a/src/HwmonTempSensor.cpp b/src/HwmonTempSensor.cpp
index cb71886..37539da 100644
--- a/src/HwmonTempSensor.cpp
+++ b/src/HwmonTempSensor.cpp
@@ -44,13 +44,16 @@ HwmonTempSensor::HwmonTempSensor(
     boost::asio::io_service& io, const std::string& sensorName,
     std::vector<thresholds::Threshold>&& thresholdsIn, const float pollRate,
     std::vector<ipmidata::IpmiConfig>&& _ipmiinfo,
-    const std::string& sensorConfiguration, const PowerState powerState) :
+    const std::string& sensorConfiguration,
+    const PowerState powerState,
+    size_t _totalThresholdNumber) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdsIn), sensorConfiguration, objectType, maxReading,
            minReading, conn, powerState),
     std::enable_shared_from_this<HwmonTempSensor>(), objServer(objectServer),
     inputDev(io, open(path.c_str(), O_RDONLY)), waitTimer(io), path(path),
-    sensorPollMs(static_cast<unsigned int>(pollRate * 1000))
+    sensorPollMs(static_cast<unsigned int>(pollRate * 1000)),
+    totalThresholdNumber(_totalThresholdNumber)
 {
     sensorInterface = objectServer.add_interface(
         "/xyz/openbmc_project/sensors/temperature/" + name,
@@ -92,7 +95,7 @@ HwmonTempSensor::HwmonTempSensor(
     association = objectServer.add_interface(
         "/xyz/openbmc_project/sensors/temperature/" + name,
         association::interface);
-    setInitialProperties(conn, sensor_paths::unitDegreesC);
+    setInitialProperties(conn, sensor_paths::unitDegreesC, sensorName, totalThresholdNumber);
 }
 
 HwmonTempSensor::~HwmonTempSensor()
-- 
2.7.4

