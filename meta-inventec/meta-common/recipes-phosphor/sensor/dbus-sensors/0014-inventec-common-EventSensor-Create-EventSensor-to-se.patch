From ffaf5ce16ca0410a40a0007379e19fed4499806c Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Wed, 19 May 2021 07:06:55 +0000
Subject: [PATCH] [inventec][common][EventSensor] - Create EventSensor to setup
 event only sensor on dbus

Sympton/Reason:
    For ipmi sensor, ipmi may need to get properites from dbus.
    Create EventSensor to read config from entity-manager and post to dbus.

Root Cause:
    N/A

Solution/Change:
    [EventSensor]
        Initial commit.

Entry Test:

Config example in Entity-manager:
        {
            "Name": "DCMI_Power_Threshold",
            "ReadingType": "discrete",
            "SensorType": "power_unit",
            "SensorInfo": [
                {
                    "Label": "DCMI_Power_Threshold",
                    "SensorModel": "Event",
                    "SensorNum": "0x78",
                    "EntityId": "0x13",
                    "EntityInstance": "0"
                }
            ],
            "Type": "EventSensor"
        },
        {
            "Name": "CPU_HOT",
            "ReadingType": "specific",
            "SensorType": "processor",
            "SensorInfo": [
                {
                    "Label": "CPU_HOT",
                    "SensorModel": "Event",
                    "SensorNum": "0x79",
                    "EntityId": "0x3",
                    "EntityInstance": "0"
                }
            ],
            "Type": "EventSensor"
        }
Dbus:
sysadmin@transformers:~# busctl tree xyz.openbmc_project.EventSensor
`-/xyz
  `-/xyz/openbmc_project
    `-/xyz/openbmc_project/sensors
      |-/xyz/openbmc_project/sensors/discrete
      | `-/xyz/openbmc_project/sensors/discrete/power_unit
      |   `-/xyz/openbmc_project/sensors/discrete/power_unit/DCMI_Power_Threshold
      `-/xyz/openbmc_project/sensors/specific
        `-/xyz/openbmc_project/sensors/specific/processor
          `-/xyz/openbmc_project/sensors/specific/processor/CPU_HOT
---
 CMakeLists.txt                                     |  17 ++
 include/EventSensor.hpp                            |  27 ++
 .../xyz.openbmc_project.eventsensor.service        |  12 +
 src/EventSensor.cpp                                | 292 +++++++++++++++++++++
 4 files changed, 348 insertions(+)
 create mode 100644 include/EventSensor.hpp
 create mode 100644 service_files/xyz.openbmc_project.eventsensor.service
 create mode 100644 src/EventSensor.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 206bc5a..e6195d9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,6 +50,7 @@ option (DISABLE_NVME "Disable installing NVME sensor" ON)
 option (DISABLE_NM_EVENT "Disable installing NM Event sensor" OFF)
 option (DISABLE_BIOS_EVENT "Disable installing BIOS Event sensor" OFF)
 option (DISABLE_WDT "Disable installing Watchdog Event sensor" OFF)
+option (DISABLE_EVENT_SENSOR "Disable installing event sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -91,6 +92,8 @@ set (BIOS_EVENT_SRC_FILES src/Utils.cpp src/BIOSEvent.cpp src/IpmiInfo.cpp)
 
 set (BMC_EVENT_SRC_FILES src/Utils.cpp src/WDTSensor.cpp src/IpmiInfo.cpp)
 
+set (EVENT_SENSOR_SRC_FILES src/Utils.cpp src/EventSensor.cpp src/IpmiInfo.cpp)
+
 set (EXTERNAL_PACKAGES Boost sdbusplus-project nlohmann-json)
 set (SENSOR_LINK_LIBS -lsystemd stdc++fs sdbusplus)
 
@@ -227,6 +230,10 @@ add_executable (wdtsensor src/WDTSensor.cpp ${BMC_EVENT_SRC_FILES})
 add_dependencies (wdtsensor sdbusplus-project)
 target_link_libraries (wdtsensor ${SENSOR_LINK_LIBS})
 
+add_executable (eventsensor src/EventSensor.cpp ${EVENT_SENSOR_SRC_FILES})
+add_dependencies (eventsensor sdbusplus-project)
+target_link_libraries (eventsensor ${SENSOR_LINK_LIBS})
+
 if (NOT DISABLE_NVME)
     add_executable (nvmesensor ${NVME_SRC_FILES})
     add_dependencies (nvmesensor sdbusplus-project)
@@ -247,6 +254,7 @@ if (NOT YOCTO)
     add_dependencies (nmevent ${EXTERNAL_PACKAGES})
     add_dependencies (biosevent ${EXTERNAL_PACKAGES})
     add_dependencies (wdtsensor ${EXTERNAL_PACKAGES})
+    add_dependencies (eventsensor ${EXTERNAL_PACKAGES})
 endif ()
 
 set (SERVICE_FILE_SRC_DIR ${PROJECT_SOURCE_DIR}/service_files)
@@ -357,3 +365,12 @@ if (NOT DISABLE_NVME)
                  ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.nvmesensor.service
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
+
+
+if (NOT DISABLE_EVENT_SENSOR)
+    install (TARGETS eventsensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.eventsensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
+
diff --git a/include/EventSensor.hpp b/include/EventSensor.hpp
new file mode 100644
index 0000000..8209c49
--- /dev/null
+++ b/include/EventSensor.hpp
@@ -0,0 +1,27 @@
+#pragma once
+
+#include "IpmiInfo.hpp"
+#include "sensor.hpp"
+
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <string>
+#include <vector>
+
+class EventSensor : public std::enable_shared_from_this<EventSensor>
+{
+  public:
+    EventSensor(const std::string& objectType,
+                sdbusplus::asio::object_server& objectServer,
+                std::shared_ptr<sdbusplus::asio::connection>& conn,
+                boost::asio::io_service& io, const std::string& eventName,
+                const std::string& readingType, const std::string& sensorType,
+                std::vector<ipmidata::IpmiConfig>&& ipmiinfo);
+    ~EventSensor();
+
+  private:
+    sdbusplus::asio::object_server& objServer;
+    std::shared_ptr<sdbusplus::asio::connection> conn;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> sensorInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ipmiInterface;
+};
diff --git a/service_files/xyz.openbmc_project.eventsensor.service b/service_files/xyz.openbmc_project.eventsensor.service
new file mode 100644
index 0000000..2bc9fc9
--- /dev/null
+++ b/service_files/xyz.openbmc_project.eventsensor.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=IPMI Event Sensor
+Wants=mapper-wait@-xyz-openbmc_project-Logging-IPMI.service
+After=mapper-wait@-xyz-openbmc_project-Logging-IPMI.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/eventsensor
+
+[Install]
+WantedBy=multi-user.target
\ No newline at end of file
diff --git a/src/EventSensor.cpp b/src/EventSensor.cpp
new file mode 100644
index 0000000..5787c64
--- /dev/null
+++ b/src/EventSensor.cpp
@@ -0,0 +1,292 @@
+#include "EventSensor.hpp"
+#include "Utils.hpp"
+
+#include <array>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_map.hpp>
+#include <boost/container/flat_set.hpp>
+#include <filesystem>
+#include <fstream>
+#include <functional>
+#include <memory>
+#include <regex>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/bus/match.hpp>
+#include <stdexcept>
+#include <string>
+#include <utility>
+#include <variant>
+#include <vector>
+
+
+namespace fs = std::filesystem;
+
+static constexpr bool DEBUG = true;
+
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+
+static constexpr std::array<const char*, 1> eventSensorTypes = {
+    "xyz.openbmc_project.Configuration.EventSensor"};
+
+
+EventSensor::EventSensor(const std::string& objectType,
+                    sdbusplus::asio::object_server& objectServer,
+                    std::shared_ptr<sdbusplus::asio::connection>& conn,
+                    boost::asio::io_service& io,
+                    const std::string& eventName,
+                    const std::string& readingType,
+                    const std::string& sensorType,
+                    std::vector<ipmidata::IpmiConfig>&& ipmiinfo):
+                    objServer(objectServer), conn(conn)
+{
+    std::string dbusPath = sensorPathPrefix + 
+        readingType +"/"+ sensorType + "/" + eventName;
+
+    if (!conn)
+    {
+        std::cerr << "Connection not created\n";
+        return;
+    }
+
+    sensorInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.Value");
+
+    double value = 0;
+    sensorInterface->register_property("Value", value);
+
+    sensorInterface->initialize();
+
+    ipmiInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.IpmiSensor");
+
+    if (ipmiinfo.empty())
+    {
+        // Default
+        ipmiInterface->register_property("sensorNumber", 0);
+        ipmiInterface->register_property("entityID", 0);
+        ipmiInterface->register_property("entityInstance", 0);
+    }
+    else
+    {
+        for (auto& ipmi : ipmiinfo)
+        {
+            ipmiInterface->register_property("sensorNumber", ipmi.number);
+            ipmiInterface->register_property("entityID", ipmi.entityId);
+            ipmiInterface->register_property("entityInstance", ipmi.entityIns);
+        }
+    }
+    ipmiInterface->initialize();
+}
+
+EventSensor::~EventSensor()
+{
+    objServer.remove_interface(sensorInterface);
+    objServer.remove_interface(ipmiInterface);
+}
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<EventSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::unique_ptr<boost::container::flat_set<std::string>>&
+        sensorsChanged)
+{
+    auto getter = std::make_shared<GetSensorConfiguration>(
+        dbusConnection,
+        std::move([&io, &objectServer, &sensors, &dbusConnection,
+                   &sensorsChanged](
+                      const ManagedObjectType& sensorConfigurations) {
+            bool firstScan = sensorsChanged == nullptr;
+
+            // search for each sensor
+            for (const std::pair<sdbusplus::message::object_path,
+                                    SensorData>& sensorConf : sensorConfigurations)
+            {
+                const SensorData *sensorData = nullptr;
+                const char *eventSensorType = nullptr;
+                const std::pair<std::string,
+                    boost::container::flat_map<std::string, BasicVariantType>>*
+                    baseConfiguration = nullptr;
+
+
+                // find base configuration
+                for (const char* type : eventSensorTypes)
+                {
+                    auto sensorBase = sensorConf.second.find(type);
+                    if (sensorBase != sensorConf.second.end())
+                    {
+                        baseConfiguration = &(*sensorBase);
+                        eventSensorType = type;
+                        break;
+                    }
+                }
+                if (baseConfiguration == nullptr)
+                {
+                    continue;
+                }
+
+                auto findSensorName = baseConfiguration->second.find("Name");
+                if (findSensorName == baseConfiguration->second.end())
+                {
+                    std::cerr << "Base configuration missing Name"
+                                << baseConfiguration->first << "\n";
+                    continue;
+                }
+
+                std::string sensorName;
+                try
+                {
+                    sensorName = std::visit(
+                        VariantToStringVisitor(), findSensorName->second);
+                }
+                catch(const std::exception& e)
+                {
+                    std::cerr << e.what() << '\n';
+                    continue;
+                }
+
+                auto findReadingType = baseConfiguration->second.find("ReadingType");
+                if (findReadingType == baseConfiguration->second.end())
+                {
+                    std::cerr << "Base configuration missing ReadingType"
+                                << baseConfiguration->first << "\n";
+                    continue;
+                }
+
+                std::string readingType;
+                try
+                {
+                    readingType = std::visit(
+                        VariantToStringVisitor(), findReadingType->second);
+                }
+                catch(const std::exception& e)
+                {
+                    std::cerr << e.what() << '\n';
+                    continue;
+                }
+
+                auto findSensorType = baseConfiguration->second.find("SensorType");
+                if (findSensorType == baseConfiguration->second.end())
+                {
+                    std::cerr << "Base configuration missing SensorType"
+                                << baseConfiguration->first << "\n";
+                    continue;
+                }
+
+                std::string sensorType;
+                try
+                {
+                    sensorType = std::visit(
+                        VariantToStringVisitor(), findSensorType->second);
+                }
+                catch(const std::exception& e)
+                {
+                    std::cerr << e.what() << '\n';
+                    continue;
+                }
+
+                sensorData = &(sensorConf.second);
+
+                if (sensorData == nullptr)
+                {
+                    std::cerr << "failed to find match for " << sensorName
+                              << "\n";
+                    continue;
+                }
+
+                // Get Sensor define for IPMI
+                std::vector<ipmidata::IpmiConfig> sensorIpmiConfig;
+                if (!parseIpmiDataFromConfig(*sensorData, sensorIpmiConfig, &sensorName))
+                {
+                    std::cerr << "error populating ipmi for " 
+                              << sensorName << "\n";
+                }
+
+                if (DEBUG)
+                {
+                    std::cerr <<"SensorName: " << sensorName << '\n'
+                        << "ReadingType: " << readingType << '\n'
+                        << "SensorType: " << sensorType << '\n';
+                }
+
+                // Make up Sensor DBUS interface
+                auto& sensor = sensors[sensorName];
+                sensor = nullptr;
+                sensor = std::make_unique<EventSensor>(
+                    eventSensorType, objectServer, dbusConnection, io, 
+                    sensorName, readingType, sensorType,
+                    std::move(sensorIpmiConfig));
+            }
+        }));
+    getter->getConfiguration(
+        std::vector<std::string>(eventSensorTypes.begin(), eventSensorTypes.end()));
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+
+    systemBus->request_name("xyz.openbmc_project.EventSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+
+    boost::container::flat_map<std::string, std::unique_ptr<EventSensor>>
+        sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+
+    std::unique_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+        std::make_unique<boost::container::flat_set<std::string>>();
+
+    if (DEBUG)
+    {
+        std::cout << "xyz.openbmc_project.EventSensor" << "\n";
+    }
+
+    io.post([&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::deadline_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+            sensorsChanged->insert(message.get_path());
+            // this implicitly cancels the timer
+            filterTimer.expires_from_now(boost::posix_time::seconds(1));
+
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    /* we were canceled*/
+                    return;
+                }
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus,
+                              sensorsChanged);
+            });
+        };
+
+    for (const char* type : eventSensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',member='PropertiesChanged',path_namespace='" +
+                std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+            eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
+
-- 
2.7.4

