From 4b42e363d42c072acc1aec89ddc7ea4bc0721549 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Wed, 13 Oct 2021 06:20:15 +0000
Subject: [PATCH] Add Microchip pac1934/2/1 chip family ADC driver

---
 drivers/hwmon/Kconfig   |  10 +
 drivers/hwmon/Makefile  |   1 +
 drivers/hwmon/pac193x.c | 599 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 610 insertions(+)
 create mode 100644 drivers/hwmon/pac193x.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 02535e544b92..4569e0ff13fa 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1476,6 +1476,16 @@ config SENSORS_PCF8591
 	  These devices are hard to detect and rarely found on mainstream
 	  hardware. If unsure, say N.
 
+config SENSORS_PAC193X
+	tristate "Microchip PAC193X"
+	depends on I2C
+	help
+	  This is a driver for the Microchip PAC193X four-channel
+	  power/energy monitor, including current and voltage sensors
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called pac193X
+
 config SENSORS_PECI_CPUTEMP
 	tristate "PECI CPU temperature monitoring client"
 	depends on PECI
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 81b340f92d10..2b892e5fe368 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -153,6 +153,7 @@ obj-$(CONFIG_SENSORS_NCT7904)	+= nct7904.o
 obj-$(CONFIG_SENSORS_NPCM7XX)	+= npcm750-pwm-fan.o
 obj-$(CONFIG_SENSORS_NSA320)	+= nsa320-hwmon.o
 obj-$(CONFIG_SENSORS_NTC_THERMISTOR)	+= ntc_thermistor.o
+obj-$(CONFIG_SENSORS_PAC193X)	+= pac193x.o
 obj-$(CONFIG_SENSORS_PC87360)	+= pc87360.o
 obj-$(CONFIG_SENSORS_PC87427)	+= pc87427.o
 obj-$(CONFIG_SENSORS_PCF8591)	+= pcf8591.o
diff --git a/drivers/hwmon/pac193x.c b/drivers/hwmon/pac193x.c
new file mode 100644
index 000000000000..3ef3c1d7bc96
--- /dev/null
+++ b/drivers/hwmon/pac193x.c
@@ -0,0 +1,599 @@
+/*
+ * Hwmon driver for the Microchip/SMSC PAC1934 Voltage/Current monitor
+ *
+ * Copyright (C) 2018 Traverse Technologies
+ * Author: Mathew McBride <matt@traverse.com.au>
+ *
+ * Note: Microchip has posted an IIO subsystem driver on the website, that
+ * might be better suited to some applications
+ *
+ * SPDX-License-Identifier: GPL-2.0
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/of_device.h>
+#include <linux/of.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+#define PAC193X_MID 0x5D
+#define PAC1934_PID 0x5B
+#define PAC1932_PID 0x59
+#define PAC1931_PID 0x58
+
+#define PAC193X_MAX_NUM_CHANNELS 4
+
+#define PAC1934_REFRESH_REGISTER 0x00
+
+/* I2C Address Maps*/
+#define PAC193X_REFRESH_REG 0x00
+#define PAC193X_CTRL_REG 0x01
+#define PAC193X_REFRESH_V_REG 0x1F
+#define PAC193X_ACC_COUNT_REG 0x02
+#define PAC193X_CTRL_STAT_REGS_ADDR 0x1C
+#define PAC193X_PID_REG_ADDR 0xFD
+
+#define PAC193X_VPOWER_ACC_0_ADDR 0x03
+#define PAC193X_VPOWER_ACC_1_ADDR (PAC193X_VPOWER_ACC_0_ADDR + 1)
+#define PAC193X_VPOWER_ACC_2_ADDR 0x05
+#define PAC193X_VPOWER_ACC_3_ADDR 0x06
+#define PAC193X_VBUS_0_ADDR 0x07
+#define PAC193X_VBUS_1_ADDR 0x08
+#define PAC193X_VBUS_2_ADDR 0x09
+#define PAC193X_VBUS_3_ADDR 0x0A
+#define PAC193X_VSENSE_0_ADDR 0x0B
+#define PAC193X_VSENSE_1_ADDR 0x0C
+#define PAC193X_VSENSE_2_ADDR 0x0D
+#define PAC193X_VSENSE_3_ADDR 0x0E
+#define PAC193X_VBUS_AVG_0_ADDR 0x0F
+#define PAC193X_VBUS_AVG_1_ADDR 0x10
+#define PAC193X_VBUS_AVG_2_ADDR 0x11
+#define PAC193X_VBUS_AVG_3_ADDR 0x12
+#define PAC193X_VSENSE_AVG_0_ADDR 0x13
+#define PAC193X_VSENSE_AVG_1_ADDR 0x14
+#define PAC193X_VSENSE_AVG_2_ADDR 0x15
+#define PAC193X_VSENSE_AVG_3_ADDR 0x16
+#define PAC193X_VPOWER_0_ADDR 0x17
+#define PAC193X_VPOWER_1_ADDR 0x18
+#define PAC193X_VPOWER_2_ADDR 0x19
+#define PAC193X_VPOWER_3_ADDR 0x1A
+
+#define UNIDIR_VBUS_LSB_STEP_SIZE 488
+#define UNIDIR_VSENSE_LSB_STEP_SIZE 1500 /*nV*/
+
+/*----------------------------------------------------------------*/
+enum pac193x_ids
+{
+	pac1934,
+	pac1932,
+	pac1931
+};
+
+struct pac193x_features
+{
+	u8 phys_channels; /*number of physical channels supported by the chip */
+	u8 prod_id;		  /*product ID*/
+};
+
+static const struct pac193x_features pac193x_chip_config[] = {
+	[pac1934] = {
+		.phys_channels = PAC193X_MAX_NUM_CHANNELS,
+		.prod_id = PAC1934_PID,
+	},
+	[pac1932] = {
+		.phys_channels = PAC193X_MAX_NUM_CHANNELS >> 1,
+		.prod_id = PAC1932_PID,
+	},
+	[pac1931] = {
+		.phys_channels = PAC193X_MAX_NUM_CHANNELS >> 2,
+		.prod_id = PAC1931_PID,
+	},
+};
+
+struct pac193x_data
+{
+	struct i2c_client *i2c;
+	u8 prod_id;
+	u8 chip_revision;
+	u8 phys_channels;
+	const struct attribute_group **attr_groups;
+	u32 shunt_resistor[PAC193X_MAX_NUM_CHANNELS]; /* Shunt resistor value, in uOhms */
+};
+
+/*----------------------------------------------------------------*/
+/* Functions*/
+/* Low-level I2c functions */
+static int pac193x_i2c_read(struct i2c_client *client, u8 reg_addr,
+							void *databuf, u8 len);
+static int pac193x_i2c_write(struct i2c_client *client, u8 reg_addr,
+							 int len, u8 *data);
+static int pac193x_i2c_send_byte(struct i2c_client *client, u8 reg_addr);
+static int pac193x_i2c_write_byte(struct i2c_client *client,
+								  u8 reg_addr, u8 val);
+
+static int pac193x_chip_identify(struct pac193x_data *data);
+
+/*----------------------------------------------------------------*/
+
+/* Low-level I2c functions */
+static int pac193x_i2c_read(struct i2c_client *client, u8 reg_addr,
+							void *databuf, u8 len)
+{
+	int ret;
+	struct i2c_msg msgs[2] = {
+		{.addr = client->addr, .len = 1, .buf = (u8 *)&reg_addr, .flags = 0},
+		{.addr = client->addr, .len = len, .buf = databuf, .flags = I2C_M_RD}};
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret < 0)
+	{
+		dev_err(&client->dev,
+				"failed reading data from register 0x%02X\n", reg_addr);
+		return ret;
+	}
+	return 0;
+}
+
+static int pac193x_i2c_write(struct i2c_client *client, u8 reg_addr,
+							 int len, u8 *data)
+{
+	int ret;
+	u8 send[len + 1];
+	struct i2c_msg msg = {.addr = client->addr,
+						  .len = len + 1,
+						  .flags = 0};
+
+	send[0] = reg_addr;
+	memcpy(&send[1], data, len * sizeof(u8));
+	msg.buf = send;
+
+	ret = i2c_transfer(client->adapter, &msg, 1);
+	if (ret < 0)
+	{
+		dev_err(&client->dev,
+				"failed writing data from register 0x%02X\n",
+				reg_addr);
+		return ret;
+	}
+	return 0;
+}
+
+static int pac193x_i2c_send_byte(struct i2c_client *client, u8 reg_addr)
+{
+	int ret;
+	u8 buf;
+	struct i2c_msg msgs[1] = {
+		{.addr = client->addr, .len = sizeof(buf), .buf = (u8 *)&buf, .flags = 0}};
+	buf = reg_addr;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret < 0)
+	{
+		dev_err(&client->dev,
+				"failed sending byte to register 0x%02X\n", reg_addr);
+		return ret;
+	}
+	return 0;
+}
+
+static int pac193x_i2c_write_byte(struct i2c_client *client,
+								  u8 reg_addr, u8 val)
+{
+	int ret;
+	u8 buf[2];
+	struct i2c_msg msgs[1] = {
+		{.addr = client->addr, .len = sizeof(buf), .buf = (u8 *)&buf, .flags = 0}};
+	buf[0] = reg_addr;
+	buf[1] = val;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret < 0)
+	{
+		dev_err(&client->dev,
+				"failed writing register 0x%02X\n", reg_addr);
+		return ret;
+	}
+	return 0;
+}
+
+static int pac193x_chip_identify(struct pac193x_data *data)
+{
+	int ret = 0;
+	struct i2c_client *i2c = data->i2c;
+	u8 chip_rev_info[3];
+
+	/*try to identify the chip variant
+	 * read the chip ID values
+	 */
+	ret = pac193x_i2c_read(i2c, PAC193X_PID_REG_ADDR,
+						   (u8 *)chip_rev_info, 3);
+	if (ret < 0)
+	{
+		dev_err(&i2c->dev, "cannot read PAC193x IDs\n");
+		goto chip_identify_err;
+	}
+
+	if (chip_rev_info[1] != PAC193X_MID)
+	{
+		dev_err(&i2c->dev, "ManufacturerID not match\n");
+		goto chip_identify_err;
+	}
+
+	dev_info(&i2c->dev, "Chip product: 0x%02x revision: 0x%02X\n",
+			 chip_rev_info[0], chip_rev_info[2]);
+
+	data->prod_id = chip_rev_info[0];
+	data->chip_revision = chip_rev_info[2];
+chip_identify_err:
+	return ret;
+}
+
+/* Return the converted value from the given register in uV or mC */
+static int pac1934_get_value(struct pac193x_data *data, u8 reg, int *result)
+{
+	int ret = 0;
+	int val, bus;
+	struct i2c_client *i2c = data->i2c;
+	u32 nvsense, shunt_res;
+	u64 cur_reading;
+	u8 read_buff[2];
+
+	ret = pac193x_i2c_read(i2c, reg, (u8 *)read_buff, 2);
+	if (ret < 0)
+	{
+		dev_err(&i2c->dev, "cannot read PAC193x Reg 0x%x\n", reg);
+		return ret;
+	}
+	val = read_buff[0] << 8 | read_buff[1];
+
+	switch (reg)
+	{
+	case PAC193X_VBUS_0_ADDR:
+	case PAC193X_VBUS_1_ADDR:
+	case PAC193X_VBUS_2_ADDR:
+	case PAC193X_VBUS_3_ADDR:
+	case PAC193X_VBUS_AVG_0_ADDR:
+	case PAC193X_VBUS_AVG_1_ADDR:
+	case PAC193X_VBUS_AVG_2_ADDR:
+	case PAC193X_VBUS_AVG_3_ADDR:
+		/*VBUS LSB Step Size 488 for Unipolar Voltages*/
+		#ifdef DEBUG
+		printk(KERN_INFO "Read value register %x=%d\n", reg, val);
+		#endif
+		*result = val * UNIDIR_VBUS_LSB_STEP_SIZE;
+		break;
+	case PAC193X_VSENSE_0_ADDR:
+	case PAC193X_VSENSE_1_ADDR:
+	case PAC193X_VSENSE_2_ADDR:
+	case PAC193X_VSENSE_3_ADDR:
+	case PAC193X_VSENSE_AVG_0_ADDR:
+	case PAC193X_VSENSE_AVG_1_ADDR:
+	case PAC193X_VSENSE_AVG_2_ADDR:
+	case PAC193X_VSENSE_AVG_3_ADDR:
+		/* The LSB value for Vsense is 1.5uV (0xFFFF ~ 100mV), to avoid floating point,
+		* make this into nV and multiply by 1500nV  */
+		#ifdef DEBUG
+		printk("Read value register %x=%d\n", reg, val);
+		#endif
+
+		nvsense = val * UNIDIR_VSENSE_LSB_STEP_SIZE;
+		if (reg >= PAC193X_VSENSE_AVG_0_ADDR)
+		{
+			bus = reg - PAC193X_VSENSE_AVG_0_ADDR;
+		}
+		else if (reg >= PAC193X_VSENSE_0_ADDR)
+		{
+			bus = reg - PAC193X_VSENSE_0_ADDR;
+		}
+		/* If there is no shunt resistor (i.e only sensing voltage), stop here */
+		if (data->shunt_resistor[bus] == 0)
+		{
+			*result = 0;
+			break;
+		}
+		shunt_res = data->shunt_resistor[bus]; /* nV / uOhms = mA */
+		cur_reading = (u64)nvsense / (u64)shunt_res;
+		*result = cur_reading;
+		break;
+	default:
+		*result = 0;
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static ssize_t pac193x_show_value(struct device *dev,
+								  struct device_attribute *da, char *buf)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct pac193x_data *data = dev_get_drvdata(dev);
+	int value;
+	int ret;
+
+	/* Send a refresh command */
+	i2c_smbus_write_byte_data(data->i2c, 0x00, 0x00);
+
+	ret = pac1934_get_value(data, attr->index, &value);
+	if (unlikely(ret < 0))
+		return ret;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", value);
+}
+
+static ssize_t shunt_value_show(struct device *dev,
+								struct device_attribute *da, char *buf)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct pac193x_data *data = dev_get_drvdata(dev);
+	unsigned int i;
+	int len = 0;
+	int cnt;
+
+	for (cnt = 0; cnt < data->phys_channels; cnt++)
+	{
+		i = data->shunt_resistor[cnt];
+		len += sprintf(buf + len, "%d ", i);
+	}
+	buf[len - 1] = '\n';
+	return len;
+}
+
+/*
+	echo [channel] [value(uOhms)]
+*/
+static ssize_t shunt_value_store(struct device *dev,
+								 struct device_attribute *da,
+								 const char *buf, size_t count)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct pac193x_data *data = dev_get_drvdata(dev);
+	int chan, sh_val;
+	char *blank, mybuff[8];
+
+	blank = strchr(buf, ' ');
+	if (!blank)
+	{
+		dev_err(dev, "%s: Missing parameters\n", "shunt_value");
+		return -EINVAL;
+	}
+	memset(mybuff, 0, sizeof(mybuff));
+	memcpy(mybuff, buf, blank - buf);
+	if (kstrtoint(mybuff, 10, &chan))
+	{
+		dev_err(dev, "%s: Channel index is not a number\n",
+				"shunt_value");
+		return -EINVAL;
+	}
+	if (chan < 0)
+	{
+		dev_err(dev, "%s: Negative channel values not allowed\n",
+				"shunt_value");
+		return -EINVAL;
+	}
+	if (chan >= data->phys_channels)
+	{
+		dev_err(dev,
+				"%s: Channel index out of range\n",
+				"shunt_value");
+		return -EINVAL;
+	}
+	if (kstrtoint(++blank, 10, &sh_val))
+	{
+		dev_err(dev, "%s: Shunt value is not a number\n",
+				"shunt_value");
+		return -EINVAL;
+	}
+	if (sh_val < 0)
+	{
+		dev_err(dev, "%s: Negative shunt values not allowed\n",
+				"shunt_value");
+		return -EINVAL;
+	}
+	data->shunt_resistor[chan] = sh_val;
+	return count;
+}
+
+static SENSOR_DEVICE_ATTR(in1_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_0_ADDR);
+static SENSOR_DEVICE_ATTR(in2_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_1_ADDR);
+static SENSOR_DEVICE_ATTR(in3_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_2_ADDR);
+static SENSOR_DEVICE_ATTR(in4_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_3_ADDR);
+static SENSOR_DEVICE_ATTR(in1_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_AVG_0_ADDR);
+static SENSOR_DEVICE_ATTR(in2_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_AVG_1_ADDR);
+static SENSOR_DEVICE_ATTR(in3_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_AVG_2_ADDR);
+static SENSOR_DEVICE_ATTR(in4_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VBUS_AVG_3_ADDR);
+
+static SENSOR_DEVICE_ATTR(curr1_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_0_ADDR);
+static SENSOR_DEVICE_ATTR(curr2_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_1_ADDR);
+static SENSOR_DEVICE_ATTR(curr3_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_2_ADDR);
+static SENSOR_DEVICE_ATTR(curr4_input, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_3_ADDR);
+
+static SENSOR_DEVICE_ATTR(curr1_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_AVG_0_ADDR);
+static SENSOR_DEVICE_ATTR(curr2_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_AVG_1_ADDR);
+static SENSOR_DEVICE_ATTR(curr3_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_AVG_2_ADDR);
+static SENSOR_DEVICE_ATTR(curr4_average, S_IRUGO, pac193x_show_value, NULL,
+						  PAC193X_VSENSE_AVG_3_ADDR);
+
+static SENSOR_DEVICE_ATTR(shunt_value, S_IRUGO | S_IWUSR, shunt_value_show, shunt_value_store,
+						  NULL);
+
+static struct attribute *pac1934_attrs[] = {
+	&sensor_dev_attr_in1_input.dev_attr.attr,
+	&sensor_dev_attr_in2_input.dev_attr.attr,
+	&sensor_dev_attr_in3_input.dev_attr.attr,
+	&sensor_dev_attr_in4_input.dev_attr.attr,
+	&sensor_dev_attr_in1_average.dev_attr.attr,
+	&sensor_dev_attr_in2_average.dev_attr.attr,
+	&sensor_dev_attr_in3_average.dev_attr.attr,
+	&sensor_dev_attr_in4_average.dev_attr.attr,
+	&sensor_dev_attr_curr1_input.dev_attr.attr,
+	&sensor_dev_attr_curr2_input.dev_attr.attr,
+	&sensor_dev_attr_curr3_input.dev_attr.attr,
+	&sensor_dev_attr_curr4_input.dev_attr.attr,
+	&sensor_dev_attr_curr1_average.dev_attr.attr,
+	&sensor_dev_attr_curr2_average.dev_attr.attr,
+	&sensor_dev_attr_curr3_average.dev_attr.attr,
+	&sensor_dev_attr_curr4_average.dev_attr.attr,
+	&sensor_dev_attr_shunt_value.dev_attr.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(pac1934);
+
+static struct attribute *pac1932_attrs[] = {
+	&sensor_dev_attr_in1_input.dev_attr.attr,
+	&sensor_dev_attr_in2_input.dev_attr.attr,
+	&sensor_dev_attr_in1_average.dev_attr.attr,
+	&sensor_dev_attr_in2_average.dev_attr.attr,
+	&sensor_dev_attr_curr1_input.dev_attr.attr,
+	&sensor_dev_attr_curr2_input.dev_attr.attr,
+	&sensor_dev_attr_curr1_average.dev_attr.attr,
+	&sensor_dev_attr_curr2_average.dev_attr.attr,
+	&sensor_dev_attr_shunt_value.dev_attr.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(pac1932);
+
+static struct attribute *pac1931_attrs[] = {
+	&sensor_dev_attr_in1_input.dev_attr.attr,
+	&sensor_dev_attr_in1_average.dev_attr.attr,
+	&sensor_dev_attr_curr1_input.dev_attr.attr,
+	&sensor_dev_attr_curr1_average.dev_attr.attr,
+	&sensor_dev_attr_shunt_value.dev_attr.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(pac1931);
+
+static int pac1934_probe(struct i2c_client *client,
+							 const struct i2c_device_id *id)
+{
+	int ret;
+	int i;
+	struct device *hwmon_dev;
+	struct pac193x_features *features;
+	struct pac193x_data *data;
+	struct device_node *of_node = client->dev.of_node;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA |
+													  I2C_FUNC_SMBUS_WORD_DATA))
+	{
+		dev_info(&client->dev, "I2C function fail\n");
+		return -ENODEV;
+	}
+
+	data = devm_kzalloc(&client->dev, sizeof(struct pac193x_data), GFP_KERNEL);
+	if (unlikely(!data))
+	{
+		dev_info(&client->dev, "Cannot alloc memory\n");
+		return -ENODEV;
+	}
+
+	data->i2c = client;
+	ret = pac193x_chip_identify(data);
+	if (ret < 0)
+	{
+		dev_info(&client->dev, "Chip identity fail\n");
+		return -EINVAL;
+	}
+
+	if (of_node)
+	{
+		features = (struct pac193x_features *)of_device_get_match_data(&client->dev);
+
+		if (features->prod_id != data->prod_id)
+		{
+			dev_info(&client->dev, "Product ID not match\n");
+			return -EINVAL;
+		}
+
+		ret = of_property_read_u32_array(of_node, "shunt-resistors",
+										 data->shunt_resistor, features->phys_channels);
+		if (ret < 0)
+		{
+			memset(data->shunt_resistor, 0,
+				   features->phys_channels * sizeof(u32));
+		}
+		else
+		{
+			for (i = 0; i < features->phys_channels; i++)
+			{
+				dev_info(&client->dev, "Bus %d shunt resistor value %d uOhms\n",
+						i, data->shunt_resistor[i]);
+			}
+		}
+	}
+
+	switch (data->prod_id)
+	{
+	case PAC1934_PID:
+		data->phys_channels = pac193x_chip_config[pac1934].phys_channels;
+		data->attr_groups = pac1934_groups;
+		break;
+	case PAC1932_PID:
+		data->phys_channels = pac193x_chip_config[pac1932].phys_channels;
+		data->attr_groups = pac1932_groups;
+		break;
+	case PAC1931_PID:
+		data->phys_channels = pac193x_chip_config[pac1931].phys_channels;
+		data->attr_groups = pac1931_groups;
+		break;
+	default:
+		dev_info(&client->dev, "Product ID not match\n");
+		break;
+	}
+
+	hwmon_dev = devm_hwmon_device_register_with_groups(&client->dev,
+													   client->name,
+													   data,
+													   data->attr_groups);
+	return PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+
+static const struct i2c_device_id pac193x_id[] = {
+	{"pac1934", pac1934},
+	{"pac1932", pac1932},
+	{"pac1931", pac1931},
+	{}};
+MODULE_DEVICE_TABLE(i2c, pac193x_id);
+
+static const struct of_device_id pac193x_of_match[] = {
+	{.compatible = "microchip,pac1934",
+	 .data = (void *)&pac193x_chip_config[pac1934]},
+	{.compatible = "microchip,pac1932",
+	 .data = (void *)&pac193x_chip_config[pac1932]},
+	{.compatible = "microchip,pac1931",
+	 .data = (void *)&pac193x_chip_config[pac1931]},
+	{},
+};
+MODULE_DEVICE_TABLE(of, pac193x_of_match);
+
+static struct i2c_driver pac193x_driver = {
+	.driver = {
+		.name = "pac193x",
+		.of_match_table = of_match_ptr(pac193x_of_match),
+	},
+	.probe = pac1934_probe,
+	.id_table = pac193x_id,
+};
+module_i2c_driver(pac193x_driver);
+
+MODULE_DESCRIPTION("PAC193x Sensor Driver");
+MODULE_AUTHOR("Mathew McBride <matt@traverse.com.au>");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

