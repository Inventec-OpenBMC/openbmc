From 22824b820d2fb836459cb6e620a1cf4083218ee1 Mon Sep 17 00:00:00 2001
From: "Alang.Huang" <Huang.Alang@inventec.com>
Date: Fri, 19 Nov 2021 03:31:56 +0000
Subject: [PATCH] add tsod driver

---
 drivers/hwmon/Kconfig  |   6 ++
 drivers/hwmon/Makefile |   1 +
 drivers/hwmon/tsod.c   | 199 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 206 insertions(+)
 create mode 100644 drivers/hwmon/tsod.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 4569e0ff13fa..3ffa40427f5f 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -2202,6 +2202,12 @@ config SENSORS_INTEL_M10_BMC_HWMON
 	  sensors monitor various telemetry data of different components on the
 	  card, e.g. board temperature, FPGA core temperature/voltage/current.
 
+config SENSORS_TSOD
+	tristate "temperature sensor on dimms"
+	depends on I2C
+	help
+	  If you say yes here you get support for thermal sensor on dimms following spd spec.
+
 if ACPI
 
 comment "ACPI drivers"
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 2b892e5fe368..2e000c7dac29 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -202,6 +202,7 @@ obj-$(CONFIG_SENSORS_W83L786NG)	+= w83l786ng.o
 obj-$(CONFIG_SENSORS_WM831X)	+= wm831x-hwmon.o
 obj-$(CONFIG_SENSORS_WM8350)	+= wm8350-hwmon.o
 obj-$(CONFIG_SENSORS_XGENE)	+= xgene-hwmon.o
+obj-$(CONFIG_SENSORS_TSOD)      += tsod.o
 
 obj-$(CONFIG_SENSORS_OCC)	+= occ/
 obj-$(CONFIG_PMBUS)		+= pmbus/
diff --git a/drivers/hwmon/tsod.c b/drivers/hwmon/tsod.c
new file mode 100644
index 000000000000..27917247a35e
--- /dev/null
+++ b/drivers/hwmon/tsod.c
@@ -0,0 +1,199 @@
+/*
+ * tsod.c - temperature sensor on dimms
+ *             
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/jiffies.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+
+/*tsod(temperature sensor on dimms) registers*/
+#define TSOD_REG_DEV_ID (0x0)
+#define TSOD_REG_TEMP_L (0x31)
+#define TSOD_REG_TEMP_H (0x32)
+
+
+/*
+ * Client data (each client gets its own)
+ */
+struct tsod_data {
+	struct i2c_client *client;
+	struct mutex update_lock;
+	bool valid; /* zero until following fields are valid */
+	unsigned long last_updated; /* in jiffies */
+};
+
+static int tsod_read(struct device *dev, enum hwmon_sensor_types type,
+			 u32 attr, int channel, long *val)
+{
+	struct tsod_data *priv = dev_get_drvdata(dev);
+	struct i2c_client *client = priv->client;
+    int rv = 0;
+    int data_h = 0;
+    int data_l = 0;    
+    int data = 0;    
+
+    switch (type) {
+	case hwmon_temp:
+	    switch (attr) {
+            case hwmon_temp_input:
+                if ((rv = i2c_smbus_read_byte_data(client,
+                     TSOD_REG_TEMP_L)) < 0) {
+                    break;
+                } 
+                data_l = rv;                
+                if ((rv = i2c_smbus_read_byte_data(client,
+                     TSOD_REG_TEMP_H)) < 0) {
+                    break;
+                } 
+                data_h = rv;
+                /*calculate temp here follow jdec 5003 Table 104ã€€thermal register*/
+                data = (data_h << 8) | data_l;
+                if (data & (1 << 10)) {
+                    /*do the special calculation in the future , normally this case will NOT be met*/
+                    dev_info(&client->dev, "temp is bellow 0 degree\n");
+                } else {
+                    data = ((data * 1000) >> 2) >> 2;
+                }
+                *val = data;
+                break;
+		    default:
+                rv = -EINVAL;
+			    break;
+
+        }
+        break;
+    default:
+		rv = -EOPNOTSUPP;
+        break;
+	}
+    
+    return rv;
+}
+
+static int tsod_write(struct device *dev, enum hwmon_sensor_types type,
+			  u32 attr, int channel, long val)
+{
+    return -EOPNOTSUPP;
+}
+
+static umode_t tsod_is_visible(const void *data,
+				   enum hwmon_sensor_types type,
+				   u32 attr, int channel)
+{
+	umode_t mode = 0;
+    switch (type) {
+	case hwmon_temp:
+	    switch (attr) {
+		case hwmon_temp_input:
+            mode = 0444;
+        default: 
+            break;
+		}
+        break; 
+    default:
+        break;
+	}
+
+    return mode;
+}
+
+static const struct hwmon_channel_info *tsod_info[] = {
+	HWMON_CHANNEL_INFO(temp,
+			           HWMON_T_INPUT),
+    NULL
+};
+
+static const struct hwmon_ops tsod_hwmon_ops = {
+	.is_visible = tsod_is_visible,
+	.read = tsod_read,
+	.write = tsod_write,
+};
+
+static const struct hwmon_chip_info tsod_chip_info = {
+	.ops = &tsod_hwmon_ops,
+	.info = tsod_info,
+};
+
+static int tsod_init_client(struct i2c_client *client)
+{
+	int rv = 0;
+
+    rv = i2c_smbus_read_byte_data(client,
+            TSOD_REG_DEV_ID);
+    if (rv < 0) {
+        dev_err(&client->dev, "init fail rv %d\n", rv);
+        return rv;
+    } else {
+        dev_info(&client->dev, "id:0x%x\n", rv);
+    }
+	return 0;
+}
+
+static int tsod_probe(struct i2c_client *client)
+{
+	struct i2c_adapter *adapter = client->adapter;
+	struct device *dev = &client->dev;
+	struct tsod_data *data;
+	struct device *hwmon_dev;
+	int err;
+
+	if (!i2c_check_functionality(adapter,
+		I2C_FUNC_SMBUS_BYTE_DATA | I2C_FUNC_SMBUS_WORD_DATA)) {
+		return -ENODEV;
+    }
+
+	data = devm_kzalloc(dev, sizeof(struct tsod_data), GFP_KERNEL);
+	if (!data) {
+		return -ENOMEM;
+    }
+	data->client = client;
+	/*
+	 * Initialize the tsod chip
+	 */
+	err = tsod_init_client(client);
+	if (err)
+		return err;
+
+	hwmon_dev = devm_hwmon_device_register_with_info(dev, client->name,
+							 data,
+							 &tsod_chip_info,
+							 NULL);
+
+	return PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static const struct i2c_device_id tsod_id[] = {
+	{ "tsod", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, tsod_id);
+
+static const struct of_device_id __maybe_unused tsod_of_match[] = {
+	{
+		.compatible = "spd,tsod",
+	},
+	{ },
+};
+MODULE_DEVICE_TABLE(of, tsod_of_match);
+
+static struct i2c_driver tsod_driver = {
+	.class		= I2C_CLASS_HWMON,
+	.probe_new	= tsod_probe,
+	.driver = {
+		.name	= "tsod",
+		.of_match_table = of_match_ptr(tsod_of_match),
+	},
+	.id_table	= tsod_id,
+};
+
+module_i2c_driver(tsod_driver);
+
+MODULE_AUTHOR(" <huang.alang@inventec.com>");
+MODULE_DESCRIPTION("temperature sensor on dimms driver");
+MODULE_LICENSE("GPL");
-- 
2.17.1

